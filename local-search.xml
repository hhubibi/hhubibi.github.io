<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>小破站の施工记录</title>
    <link href="/2024/09/18/dev-log/"/>
    <url>/2024/09/18/dev-log/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>面试多线程题</title>
    <link href="/2024/09/06/multithread/"/>
    <url>/2024/09/06/multithread/</url>
    
    <content type="html"><![CDATA[<h1 id="多线程打印奇偶数"><a href="#多线程打印奇偶数" class="headerlink" title="多线程打印奇偶数"></a>多线程打印奇偶数</h1><h2 id="Sychronized写法"><a href="#Sychronized写法" class="headerlink" title="Sychronized写法"></a>Sychronized写法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrintOddEven</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">MAX_COUNT</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Object</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(<span class="hljs-type">int</span> isOdd)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; MAX_COUNT; i++) &#123;<br>            <span class="hljs-keyword">synchronized</span> (lock) &#123;<br>                <span class="hljs-keyword">while</span> (num % <span class="hljs-number">2</span> != isOdd) &#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        lock.wait();<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        e.printStackTrace();<br>                    &#125;<br>                &#125;<br><br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;: &quot;</span> + num);<br>                num++;<br>                lock.notify();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">threadA</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                print(<span class="hljs-number">0</span>);<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;Thread-a&quot;</span>);<br><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">threadB</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                print(<span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;Thread-b&quot;</span>);<br><br>        threadA.start();<br>        threadB.start();<br><br>        threadA.join();<br>        threadB.join();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ReentrantLock写法"><a href="#ReentrantLock写法" class="headerlink" title="ReentrantLock写法"></a>ReentrantLock写法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrintOddEvenReentrant</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">MAX_COUNT</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Condition</span> <span class="hljs-variable">odd</span> <span class="hljs-operator">=</span> lock.newCondition();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Condition</span> <span class="hljs-variable">even</span> <span class="hljs-operator">=</span> lock.newCondition();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printOdd</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; MAX_COUNT; i++) &#123;<br>            lock.lock();<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">while</span> (num % <span class="hljs-number">2</span> != <span class="hljs-number">1</span>) &#123;<br>                    odd.await();<br>                &#125;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;: &quot;</span> + num);<br>                num++;<br>                even.signal();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                lock.unlock();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printEven</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; MAX_COUNT; i++) &#123;<br>            lock.lock();<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">while</span> (num % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>) &#123;<br>                    even.await();<br>                &#125;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;: &quot;</span> + num);<br>                num++;<br>                odd.signal();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                lock.unlock();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">threadA</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                printOdd();<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;Thread-a&quot;</span>);<br><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">threadB</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                printEven();<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;Thread-b&quot;</span>);<br><br>        threadA.start();<br>        threadB.start();<br><br>        threadA.join();<br>        threadB.join();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CAS中的ABA问题</title>
    <link href="/2024/09/06/ABA/"/>
    <url>/2024/09/06/ABA/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是ABA问题"><a href="#什么是ABA问题" class="headerlink" title="什么是ABA问题"></a>什么是ABA问题</h1><p>ABA就是有两个线程共享一个变量value，A线程读取到的时候这个值为1，准备修改的时候值还是1，但是可能这过程中B线程修改了变量1-&gt;2-&gt;1，仅仅用CAS无法得知这种修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.atomic.AtomicInteger;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ABAProblemExample</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">AtomicInteger</span> <span class="hljs-variable">atomicValue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInteger</span>(<span class="hljs-number">1</span>);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">threadA</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">expectedValue</span> <span class="hljs-operator">=</span> atomicValue.get();<br>            System.out.println(<span class="hljs-string">&quot;Thread-A reads value: &quot;</span> + expectedValue);<br><br>            <span class="hljs-comment">// 模拟线程 B 修改了值</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>); <span class="hljs-comment">// 休眠让线程 B 先执行</span><br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br><br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">isSuccess</span> <span class="hljs-operator">=</span> atomicValue.compareAndSet(expectedValue, <span class="hljs-number">2</span>);<br>            System.out.println(<span class="hljs-string">&quot;Thread-A CAS result: &quot;</span> + isSuccess + <span class="hljs-string">&quot;, new value: &quot;</span> + atomicValue.get());<br>        &#125;);<br><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">threadB</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">500</span>); <span class="hljs-comment">// 确保 Thread-A 先读取到值</span><br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br><br>            <span class="hljs-comment">// 模拟 ABA 问题，先把值改成 B 然后再改回 A</span><br>            atomicValue.compareAndSet(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>); <span class="hljs-comment">// A -&gt; B</span><br>            System.out.println(<span class="hljs-string">&quot;Thread-B changes value to: &quot;</span> + atomicValue.get());<br><br>            atomicValue.compareAndSet(<span class="hljs-number">3</span>, <span class="hljs-number">1</span>); <span class="hljs-comment">// B -&gt; A</span><br>            System.out.println(<span class="hljs-string">&quot;Thread-B changes value back to: &quot;</span> + atomicValue.get());<br>        &#125;);<br><br>        threadA.start();<br>        threadB.start();<br><br>        threadA.join();<br>        threadB.join();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面这个程序会输出</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-keyword">Thread</span><span class="hljs-params">-A</span> reads value: <span class="hljs-number">1</span><br><span class="hljs-keyword">Thread</span><span class="hljs-params">-B</span> changes value <span class="hljs-keyword">to</span>: <span class="hljs-number">3</span><br><span class="hljs-keyword">Thread</span><span class="hljs-params">-B</span> changes value back <span class="hljs-keyword">to</span>: <span class="hljs-number">1</span><br><span class="hljs-keyword">Thread</span><span class="hljs-params">-A</span> CAS result: <span class="hljs-literal">true</span>, <span class="hljs-literal">new</span> value: <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h1 id="使用AtomicStampedReference解决"><a href="#使用AtomicStampedReference解决" class="headerlink" title="使用AtomicStampedReference解决"></a>使用AtomicStampedReference解决</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.atomic.AtomicStampedReference;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ABAProblemSolution</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> AtomicStampedReference&lt;Integer&gt; atomicStampedRef = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicStampedReference</span>&lt;&gt;(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">threadA</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-type">int</span>[] stampHolder = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">1</span>];<br>            <span class="hljs-type">Integer</span> <span class="hljs-variable">expectedValue</span> <span class="hljs-operator">=</span> atomicStampedRef.get(stampHolder);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">currentStamp</span> <span class="hljs-operator">=</span> stampHolder[<span class="hljs-number">0</span>];<br>            System.out.println(<span class="hljs-string">&quot;Thread-A reads value: &quot;</span> + expectedValue + <span class="hljs-string">&quot; with stamp: &quot;</span> + currentStamp);<br><br>            <span class="hljs-comment">// 模拟线程 B 修改了值</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>); <span class="hljs-comment">// 休眠让线程 B 先执行</span><br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br><br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">isSuccess</span> <span class="hljs-operator">=</span> atomicStampedRef.compareAndSet(expectedValue, <span class="hljs-number">2</span>, currentStamp, currentStamp + <span class="hljs-number">1</span>);<br>            System.out.println(<span class="hljs-string">&quot;Thread-A CAS result: &quot;</span> + isSuccess + <span class="hljs-string">&quot;, new value: &quot;</span> + atomicStampedRef.getReference() + <span class="hljs-string">&quot; with stamp: &quot;</span> + atomicStampedRef.getStamp());<br>        &#125;);<br><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">threadB</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">500</span>); <span class="hljs-comment">// 确保 Thread-A 先读取到值</span><br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br><br>            <span class="hljs-comment">// 模拟 ABA 问题，先把值改成 B 然后再改回 A</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">currentStamp</span> <span class="hljs-operator">=</span> atomicStampedRef.getStamp();<br>            atomicStampedRef.compareAndSet(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, currentStamp, currentStamp + <span class="hljs-number">1</span>); <span class="hljs-comment">// A -&gt; B</span><br>            System.out.println(<span class="hljs-string">&quot;Thread-B changes value to: &quot;</span> + atomicStampedRef.getReference() + <span class="hljs-string">&quot; with stamp: &quot;</span> + atomicStampedRef.getStamp());<br><br>            atomicStampedRef.compareAndSet(<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, atomicStampedRef.getStamp(), atomicStampedRef.getStamp() + <span class="hljs-number">1</span>); <span class="hljs-comment">// B -&gt; A</span><br>            System.out.println(<span class="hljs-string">&quot;Thread-B changes value back to: &quot;</span> + atomicStampedRef.getReference() + <span class="hljs-string">&quot; with stamp: &quot;</span> + atomicStampedRef.getStamp());<br>        &#125;);<br><br>        threadA.start();<br>        threadB.start();<br><br>        threadA.join();<br>        threadB.join();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的程序会输出</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-keyword">Thread</span><span class="hljs-params">-A</span> reads value: <span class="hljs-number">1</span> <span class="hljs-keyword">with</span> stamp: <span class="hljs-number">0</span><br><span class="hljs-keyword">Thread</span><span class="hljs-params">-B</span> changes value <span class="hljs-keyword">to</span>: <span class="hljs-number">3</span> <span class="hljs-keyword">with</span> stamp: <span class="hljs-number">1</span><br><span class="hljs-keyword">Thread</span><span class="hljs-params">-B</span> changes value back <span class="hljs-keyword">to</span>: <span class="hljs-number">1</span> <span class="hljs-keyword">with</span> stamp: <span class="hljs-number">2</span><br><span class="hljs-keyword">Thread</span><span class="hljs-params">-A</span> CAS result: <span class="hljs-literal">false</span>, <span class="hljs-literal">new</span> value: <span class="hljs-number">1</span> <span class="hljs-keyword">with</span> stamp: <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>原因是AtomicStampedReference的CAS操作需要比较版本号，如果期待的版本号不等，则CAS失败</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">compareAndSet</span><span class="hljs-params">(V   expectedReference,</span><br><span class="hljs-params">                                 V   newReference,</span><br><span class="hljs-params">                                 <span class="hljs-type">int</span> expectedStamp,</span><br><span class="hljs-params">                                 <span class="hljs-type">int</span> newStamp)</span> &#123;<br>    Pair&lt;V&gt; current = pair;<br>    <span class="hljs-keyword">return</span><br>        expectedReference == current.reference &amp;&amp;<br>        expectedStamp == current.stamp &amp;&amp;<br>        ((newReference == current.reference &amp;&amp;<br>            newStamp == current.stamp) ||<br>            casPair(current, Pair.of(newReference, newStamp)));<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ReentrantLock可中断等特性的例子</title>
    <link href="/2024/09/05/reentrantlock/"/>
    <url>/2024/09/05/reentrantlock/</url>
    
    <content type="html"><![CDATA[<h1 id="可中断性"><a href="#可中断性" class="headerlink" title="可中断性"></a>可中断性</h1><p>下面这个例子，A先获取锁，然后持有锁睡眠5秒，B尝试获取锁的过程中被中断。于是程序输出</p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cos">Thread-A acquired the <span class="hljs-keyword">lock</span>.<br>Thread-B was interrupted <span class="hljs-keyword">while</span> waiting <span class="hljs-keyword">for</span> the <span class="hljs-keyword">lock</span>.<br>Thread-A released the <span class="hljs-keyword">lock</span>.<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReentrantLockExample</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doWork</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 尝试获取锁，并支持中断</span><br>            lock.lockInterruptibly();<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; acquired the lock.&quot;</span>);<br><br>            <span class="hljs-comment">// 模拟一些工作</span><br>            Thread.sleep(<span class="hljs-number">5000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; was interrupted while waiting for the lock.&quot;</span>);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (lock.isHeldByCurrentThread()) &#123;<br>                lock.unlock();<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; released the lock.&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ReentrantLockExample</span> <span class="hljs-variable">example</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLockExample</span>();<br><br>        <span class="hljs-comment">// 创建一个线程 A</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">threadA</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; example.doWork1(), <span class="hljs-string">&quot;Thread-A&quot;</span>);<br>        <span class="hljs-comment">// 创建一个线程 B，会在短暂等待后中断</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">threadB</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                example.doWork1();<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;Thread-B&quot;</span>);<br><br>        threadA.start();<br>        threadB.start();<br><br>        <span class="hljs-comment">// 主线程等待 1 秒钟，然后中断 B 线程</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>            threadB.interrupt();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果是用synchronized锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doWork2</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; acquired the lock.&quot;</span>);<br>        Thread.sleep(<span class="hljs-number">5000</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; was interrupted while waiting for the lock.&quot;</span>);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; released the lock.&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>则会输出</p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cos">Thread-A acquired the <span class="hljs-keyword">lock</span>.<br>Thread-A released the <span class="hljs-keyword">lock</span>.<br>Thread-B acquired the <span class="hljs-keyword">lock</span>.<br>Thread-B was interrupted <span class="hljs-keyword">while</span> waiting <span class="hljs-keyword">for</span> the <span class="hljs-keyword">lock</span>.<br>Thread-B released the <span class="hljs-keyword">lock</span>.<br></code></pre></td></tr></table></figure><h1 id="超时"><a href="#超时" class="headerlink" title="超时"></a>超时</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doWork3</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 尝试获取锁，等待最多 2 秒</span><br>        <span class="hljs-keyword">if</span> (lock.tryLock(<span class="hljs-number">2</span>, TimeUnit.SECONDS)) &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; acquired the lock.&quot;</span>);<br><br>            <span class="hljs-comment">// 模拟一些工作</span><br>            Thread.sleep(<span class="hljs-number">3000</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; could not acquire the lock within timeout.&quot;</span>);<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; was interrupted.&quot;</span>);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (lock.isHeldByCurrentThread()) &#123;<br>            lock.unlock();<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; released the lock.&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testTimeout</span><span class="hljs-params">(ReentrantLockExample example)</span> &#123;<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">threadA</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; example.doWork3(), <span class="hljs-string">&quot;Thread-A&quot;</span>);<br>    <span class="hljs-comment">// 创建一个线程 B，会尝试获取锁但会因为锁被线程A占用而超时</span><br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">threadB</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; example.doWork3(), <span class="hljs-string">&quot;Thread-B&quot;</span>);<br><br>    threadA.start();<br>    threadB.start();<br>&#125;<br></code></pre></td></tr></table></figure><p>会输出</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">Thread-B acquired <span class="hljs-keyword">the</span> lock.<br>Thread-A could <span class="hljs-keyword">not</span> acquire <span class="hljs-keyword">the</span> lock <span class="hljs-keyword">within</span> timeout.<br>Thread-B released <span class="hljs-keyword">the</span> lock.<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二叉树刷题笔记</title>
    <link href="/2024/08/30/tree-traverse/"/>
    <url>/2024/08/30/tree-traverse/</url>
    
    <content type="html"><![CDATA[<h1 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h1><h2 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h2><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title function_">preorderTraversal</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>    List&lt;Integer&gt; ans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    Stack&lt;TreeNode&gt; stk = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>    <span class="hljs-type">TreeNode</span> <span class="hljs-variable">curr</span> <span class="hljs-operator">=</span> root;<br>    <span class="hljs-keyword">while</span> (curr != <span class="hljs-literal">null</span> || !stk.isEmpty()) &#123;<br>        <span class="hljs-keyword">if</span> (curr != <span class="hljs-literal">null</span>) &#123;<br>            ans.add(curr.val);<br>            stk.push(curr);<br>            curr = curr.left;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            curr = stk.pop();<br>            curr = curr.right;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Morris"><a href="#Morris" class="headerlink" title="Morris"></a>Morris</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title function_">preorderTraversal</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>    List&lt;Integer&gt; ans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-type">TreeNode</span> <span class="hljs-variable">curr</span> <span class="hljs-operator">=</span> root, prev = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">while</span> (curr != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">if</span> (curr.left == <span class="hljs-literal">null</span>) &#123;<br>            ans.add(curr.val);<br>            curr = curr.right;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            prev = curr.left;<br>            <span class="hljs-keyword">while</span> (prev.right != <span class="hljs-literal">null</span> &amp;&amp; prev.right != curr) &#123;<br>                prev = prev.right;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (prev.right == <span class="hljs-literal">null</span>) &#123;<br>                ans.add(curr.val);<br>                prev.right = curr;<br>                curr = curr.left;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                prev.right = <span class="hljs-literal">null</span>;<br>                curr = curr.right;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title function_">inorderTraversal</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>    List&lt;Integer&gt; ans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    Stack&lt;TreeNode&gt; stk = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>    <span class="hljs-type">TreeNode</span> <span class="hljs-variable">curr</span> <span class="hljs-operator">=</span> root;<br>    <span class="hljs-keyword">while</span> (curr != <span class="hljs-literal">null</span> || !stk.isEmpty()) &#123;<br>        <span class="hljs-keyword">if</span> (curr != <span class="hljs-literal">null</span>) &#123;<br>            stk.push(curr);<br>            curr = curr.left;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            curr = stk.pop();<br>            ans.add(curr.val);<br>            curr = curr.right;<br>        &#125;<br>        <br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Morris-1"><a href="#Morris-1" class="headerlink" title="Morris"></a>Morris</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title function_">inorderTraversal</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>    List&lt;Integer&gt; ans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-type">TreeNode</span> <span class="hljs-variable">curr</span> <span class="hljs-operator">=</span> root, prev = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">while</span> (curr != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">if</span> (curr.left == <span class="hljs-literal">null</span>) &#123;<br>            ans.add(curr.val);<br>            curr = curr.right;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            prev = curr.left;<br>            <span class="hljs-keyword">while</span> (prev.right != <span class="hljs-literal">null</span> &amp;&amp; prev.right != curr) &#123;<br>                prev = prev.right;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (prev.right == <span class="hljs-literal">null</span>) &#123;<br>                prev.right = curr;<br>                curr = curr.left;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                prev.right = <span class="hljs-literal">null</span>;<br>                ans.add(curr.val);<br>                curr = curr.right;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title function_">postorderTraversal</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>    List&lt;Integer&gt; ans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br><br>    Stack&lt;TreeNode&gt; stk = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>    <span class="hljs-type">TreeNode</span> <span class="hljs-variable">prev</span> <span class="hljs-operator">=</span> root, curr = root;<br>    <span class="hljs-keyword">while</span> (curr != <span class="hljs-literal">null</span> || !stk.isEmpty()) &#123;<br>        <span class="hljs-keyword">if</span> (curr != <span class="hljs-literal">null</span>) &#123;<br>            stk.push(curr);<br>            curr = curr.left;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            curr = stk.pop();<br>            <span class="hljs-keyword">if</span> (curr.right == <span class="hljs-literal">null</span> || curr.right == prev) &#123;<br>                ans.add(curr.val);<br>                prev = curr;<br>                curr = <span class="hljs-literal">null</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                stk.push(curr);<br>                curr = curr.right;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="判断完全二叉树的结点个数"><a href="#判断完全二叉树的结点个数" class="headerlink" title="判断完全二叉树的结点个数"></a>判断完全二叉树的结点个数</h1><p>递归，当二叉树的左右深度不一样的时候，它一定不是满二叉树，但是完全二叉树的子树一定是完全二叉树，因此可以递归计算子树的节点数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">countNodes</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-type">TreeNode</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> root.left;<br>    <span class="hljs-type">TreeNode</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> root.right;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">leftLevel</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (left != <span class="hljs-literal">null</span>) &#123;<br>        leftLevel++;<br>        left = left.left;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">rightLevel</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (right != <span class="hljs-literal">null</span>) &#123;<br>        rightLevel++;<br>        right = right.right;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (leftLevel == rightLevel) &#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-number">1</span> &lt;&lt; (leftLevel + <span class="hljs-number">1</span>)) - <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> countNodes(root.left) + countNodes(root.right) + <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>带上下限的红包算法</title>
    <link href="/2024/08/29/redpacket/"/>
    <url>/2024/08/29/redpacket/</url>
    
    <content type="html"><![CDATA[<blockquote><p>群红包总金额m，分n份，每份下限x，上限y，生成一种的随机的可行分配方案</p></blockquote><h2 id="最简单的版本，随机"><a href="#最简单的版本，随机" class="headerlink" title="最简单的版本，随机"></a>最简单的版本，随机</h2><p>思路就是先分配最小金额，然后把剩下的金额不断随机加上去，直到为0。这种不太适合流式处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;Integer&gt; <span class="hljs-title function_">generateRedPacket</span><span class="hljs-params">(<span class="hljs-type">int</span> m, <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">minTotal</span> <span class="hljs-operator">=</span> n * x;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">maxTotal</span> <span class="hljs-operator">=</span> n * y;<br>    <span class="hljs-keyword">if</span> (m &gt; maxTotal || m &lt; minTotal) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-type">int</span> <span class="hljs-variable">remaining</span> <span class="hljs-operator">=</span> m - minTotal;<br>    <span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>    List&lt;Integer&gt; redPacket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        redPacket.add(x);<br>    &#125;<br><br>    <span class="hljs-type">int</span> <span class="hljs-variable">idx</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (remaining &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">maxAddition</span> <span class="hljs-operator">=</span> Math.min(y - redPacket.get(idx), remaining);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">addition</span> <span class="hljs-operator">=</span> r.nextInt(maxAddition + <span class="hljs-number">1</span>);<br>        redPacket.set(idx, addition + redPacket.get(idx));<br>        idx++;<br>        remaining -= addition;<br>    &#125;<br><br>    Collections.shuffle(redPacket, r);<br>    <span class="hljs-keyword">return</span> redPacket;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二倍均值法"><a href="#二倍均值法" class="headerlink" title="二倍均值法"></a>二倍均值法</h2><p>能保证生成10个红包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;Integer&gt; <span class="hljs-title function_">generateRedPacket2</span><span class="hljs-params">(<span class="hljs-type">int</span> m, <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">minTotal</span> <span class="hljs-operator">=</span> n * x;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">maxTotal</span> <span class="hljs-operator">=</span> n * y;<br>        <span class="hljs-keyword">if</span> (m &gt; maxTotal || m &lt; minTotal) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">remaining</span> <span class="hljs-operator">=</span> m;<br>        <span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        List&lt;Integer&gt; redPacket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">min</span> <span class="hljs-operator">=</span> Math.max(x, remaining - (n - i - <span class="hljs-number">1</span>) * y);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> Math.min(y, remaining - (n - i - <span class="hljs-number">1</span>) * x);<br><br>            <span class="hljs-type">int</span> <span class="hljs-variable">amount</span> <span class="hljs-operator">=</span> min + r.nextInt(max - min + <span class="hljs-number">1</span>);<br>            redPacket.add(amount);<br>            remaining -= amount;<br>        &#125;<br><br>        Collections.shuffle(redPacket, r);<br>        <span class="hljs-keyword">return</span> redPacket;<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>场景题和系统设计</title>
    <link href="/2024/08/26/system-design/"/>
    <url>/2024/08/26/system-design/</url>
    
    <content type="html"><![CDATA[<h2 id="分布式id"><a href="#分布式id" class="headerlink" title="分布式id"></a>分布式id</h2><ul><li>唯一</li><li>高可用</li><li>高性能：生成速度快、资源消耗小</li><li>有序性：趋势递增</li><li>安全：需要脱敏，不能包含订单数量等敏感信息</li></ul><h3 id="数据库主键自增"><a href="#数据库主键自增" class="headerlink" title="数据库主键自增"></a>数据库主键自增</h3><h3 id="数据库号段"><a href="#数据库号段" class="headerlink" title="数据库号段"></a>数据库号段</h3><p>其实就是批量获取一批号，<code>current_max_id</code>到<code>current_max_id + step</code>，减少数据库的访问次数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `sequence_id_generator` (<br>  `id` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `current_max_id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;当前最大id&#x27;</span>,<br>  `step` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;号段的长度&#x27;</span>,<br>  `version` <span class="hljs-type">int</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;版本号&#x27;</span>,<br>  `biz_type`    <span class="hljs-type">int</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;业务类型&#x27;</span>,<br>   <span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb4;<br></code></pre></td></tr></table></figure><p>上面两种都存在单点问题和安全问题（可以推算出订单量），而且id没有业务含义</p><h3 id="redis-incr"><a href="#redis-incr" class="headerlink" title="redis incr"></a>redis incr</h3><h3 id="UUID"><a href="#UUID" class="headerlink" title="UUID"></a>UUID</h3><ul><li>优点：生成速度快</li><li>缺点：存储消耗空间大、无序、基于mac地址生成的uuid不安全、无业务含义、重复问题</li></ul><h3 id="snowflake"><a href="#snowflake" class="headerlink" title="snowflake"></a>snowflake</h3><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">*</span><span class="hljs-literal">------</span><span class="hljs-comment">*</span><span class="hljs-literal">------------</span><span class="hljs-comment">*</span><span class="hljs-literal">----------------</span><span class="hljs-comment">*</span><span class="hljs-literal">-------------</span><span class="hljs-comment">*</span><span class="hljs-literal">-----------</span><span class="hljs-comment">*</span><br><span class="hljs-comment">| sign | timestamp  | datacenter id  |  worker id  | sequence  |</span><br><span class="hljs-comment">*</span><span class="hljs-literal">------</span><span class="hljs-comment">*</span><span class="hljs-literal">------------</span><span class="hljs-comment">*</span><span class="hljs-literal">----------------</span><span class="hljs-comment">*</span><span class="hljs-literal">-------------</span><span class="hljs-comment">*</span><span class="hljs-literal">-----------</span><span class="hljs-comment">*</span><br>  <span class="hljs-comment">1bits    41bits       5bits             5bits        12bits</span>      <br></code></pre></td></tr></table></figure><ul><li>sign：默认为0，表示正数</li><li>timestamp：时间戳，默认为ms</li><li>sequence：单台机器每毫秒能产生的最大id数</li></ul><p>优缺点</p><ul><li>优点：生成速度快，id有序递增</li><li>缺点：重复id（时间回拨），依赖机器id对分布式环境不友好</li></ul><h2 id="分布式锁实现"><a href="#分布式锁实现" class="headerlink" title="分布式锁实现"></a>分布式锁实现</h2><h3 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h3><ul><li>存储空间，可以访问到</li><li>唯一标识</li><li>至少两种状态</li></ul><h3 id="典型实现"><a href="#典型实现" class="headerlink" title="典型实现"></a>典型实现</h3><ul><li>Zookeeper：先创建临时顺序节点，然后get得到所有创建的子节点，如果序号最小，认为得到锁，否则监视minmax节点，尝试继续获取锁，释放锁则删除节点。临时节点可以在网络故障的时候自动解锁，防止死锁。</li><li>Redis：setnx，判断超时，getset设置新值返回旧值，如果还是超时说明获取了锁，否则获取失败。（会有全局时钟问题）</li><li>MySQL</li></ul><h3 id="MySQL分布式锁"><a href="#MySQL分布式锁" class="headerlink" title="MySQL分布式锁"></a>MySQL分布式锁</h3><h4 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> distributed_locks (<br>    lock_name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">PRIMARY</span> KEY,<br>    locked_by <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    locked_at <span class="hljs-type">TIMESTAMP</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span>,<br>    expires_at <span class="hljs-type">TIMESTAMP</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br>);<br></code></pre></td></tr></table></figure><p><strong>加锁</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> distributed_locks (lock_name, locked_by, locked_at, expires_at)<br><span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;my_lock&#x27;</span>, <span class="hljs-string">&#x27;unique_client_id&#x27;</span>, <span class="hljs-built_in">CURRENT_TIMESTAMP</span>, DATE_ADD(<span class="hljs-built_in">CURRENT_TIMESTAMP</span>, <span class="hljs-type">INTERVAL</span> <span class="hljs-number">30</span> <span class="hljs-keyword">SECOND</span>))<br><span class="hljs-keyword">ON</span> DUPLICATE KEY <span class="hljs-keyword">UPDATE</span><br>    locked_by <span class="hljs-operator">=</span> IF(expires_at <span class="hljs-operator">&lt;</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span>, <span class="hljs-string">&#x27;unique_client_id&#x27;</span>, locked_by),<br>    locked_at <span class="hljs-operator">=</span> IF(expires_at <span class="hljs-operator">&lt;</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span>, <span class="hljs-built_in">CURRENT_TIMESTAMP</span>, locked_at),<br>    expires_at <span class="hljs-operator">=</span> IF(expires_at <span class="hljs-operator">&lt;</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span>, DATE_ADD(<span class="hljs-built_in">CURRENT_TIMESTAMP</span>, <span class="hljs-type">INTERVAL</span> <span class="hljs-number">30</span> <span class="hljs-keyword">SECOND</span>), expires_at);<br></code></pre></td></tr></table></figure><p><strong>解锁</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> distributed_locks <span class="hljs-keyword">WHERE</span> lock_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;my_lock&#x27;</span> <span class="hljs-keyword">AND</span> locked_by <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;unique_client_id&#x27;</span>;<br></code></pre></td></tr></table></figure><h4 id="select-for-update"><a href="#select-for-update" class="headerlink" title="select for update"></a>select for update</h4><p><strong>加锁</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">START</span> TRANSACTION;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> distributed_locks <span class="hljs-keyword">WHERE</span> lock_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;my_lock&#x27;</span> <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">UPDATE</span>;<br><br><span class="hljs-comment">-- 如果记录不存在，插入新锁记录</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> distributed_locks (lock_name, locked_by) <br><span class="hljs-keyword">SELECT</span> <span class="hljs-string">&#x27;my_lock&#x27;</span>, <span class="hljs-string">&#x27;unique_client_id&#x27;</span><br><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> (<span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> distributed_locks <span class="hljs-keyword">WHERE</span> lock_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;my_lock&#x27;</span>);<br><span class="hljs-keyword">COMMIT</span>;<br></code></pre></td></tr></table></figure><p><strong>解锁</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">START</span> TRANSACTION;<br><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> distributed_locks <span class="hljs-keyword">WHERE</span> lock_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;my_lock&#x27;</span> <span class="hljs-keyword">AND</span> locked_by <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;unique_client_id&#x27;</span>;<br><span class="hljs-keyword">COMMIT</span>;<br></code></pre></td></tr></table></figure><h2 id="设计秒杀系统"><a href="#设计秒杀系统" class="headerlink" title="设计秒杀系统"></a>设计秒杀系统</h2><h3 id="高性能"><a href="#高性能" class="headerlink" title="高性能"></a>高性能</h3><p>热key二级缓存：热点数据可以在redis写一份，jvm内存写一份（访问最快）</p><p>如何检测热key，京东的解决方案？</p><ul><li>etcd集群：worker ip和规则配置，例如userId_ 开头的key，每2s出现20次算热key之类的，过期时间之类的</li><li>worker：上报ip，监听和计算client发来的key，达到规则的阈值后推送到client和etcd</li><li>client：获取规则，worker ip等，定时任务每500ms批量发送一批待测key到worker（经过shard能保证固定的key的到同一个机器），已经热了的key不会再发送。收到worker推送的热key后，本地caffeine缓存。</li></ul><h3 id="高可用"><a href="#高可用" class="headerlink" title="高可用"></a>高可用</h3><ul><li>Redis集群，哨兵</li><li>限流<ul><li>根据ip、用户限流</li><li>验证码</li><li>提前预约</li></ul></li><li>流量削峰</li><li>降级：优先保障核心功能，比如关闭视频评论，保留播放功能</li><li>熔断：比如A要调B的接口，但是B出故障了，当A调B的失败次数到阈值后，停止A对B的调用</li></ul><h3 id="一致性"><a href="#一致性" class="headerlink" title="一致性"></a>一致性</h3><ul><li>减库存方案：下单减库存（即使不付款）<ul><li>不超卖：秒杀商品在缓存中，lua脚本，Redis中减库存成功，通过MQ异步更新到MySQL，达到最终一致性</li></ul></li><li>余额扣减方案：悲观锁，MySQL的select for update，并发量不高可以使用乐观锁</li><li>接口幂等：悲观锁、乐观锁、token、唯一索引、分布式锁<ul><li>token：第一次请求时，服务器生成token带过期时间的，存入redis，第二次请求header带上token，后面先删除token再执行请求（大不了重写生成token，好过带着token再进行第二次非法操作）</li></ul></li></ul><h2 id="Feed流实现"><a href="#Feed流实现" class="headerlink" title="Feed流实现"></a>Feed流实现</h2><h3 id="什么是Feed流"><a href="#什么是Feed流" class="headerlink" title="什么是Feed流"></a>什么是Feed流</h3><p>知乎、抖音首页推荐，朋友圈动态等。</p><ul><li>纯智能推荐：兴趣点</li><li>纯Timeline：时间线</li><li>两者结合</li></ul><h3 id="架构设计"><a href="#架构设计" class="headerlink" title="架构设计"></a>架构设计</h3><ul><li>推模式：写入数据库太多</li><li>拉模式：存储成本低，但是实时性差</li><li>推拉结合：推模式写入活跃用户的数据库，不活跃的用户自己去拉</li></ul><h2 id="短链系统"><a href="#短链系统" class="headerlink" title="短链系统"></a>短链系统</h2><h3 id="为什么要有短链"><a href="#为什么要有短链" class="headerlink" title="为什么要有短链"></a>为什么要有短链</h3><ul><li>短信字数限制</li><li>微博字数限制</li><li>长链生成的二维码太过复杂</li></ul><h3 id="短链生成"><a href="#短链生成" class="headerlink" title="短链生成"></a>短链生成</h3><p>比较一般的方法</p><ul><li>现在redis中查找长链，找到则说明已经生成</li><li>没找到就MD5或者murmurhash生成，转成62进制短码，拼成短网址，检查短网址是否存在于redis</li><li>如果不存在，保存长链到短链和短链到长链的映射，返回，结束</li><li>存在说明发生哈希冲突，加盐生成短码直到没有冲突</li></ul><p>存在的问题？</p><ul><li>外部操作太多，访问redis，hbase等</li><li>随着数量增加，哈希碰撞增加</li><li>大部分短链的有效期很短，1个月后就不再访问了，可以优化生成服务</li></ul><p>如何优化？</p><ul><li>采用自增算法生成短码</li><li>去掉长短映射（没必要）</li><li>内存自增+缓存批量区号（比如一次取10000个）</li><li>30天内有一次访问重置30天有效期，否则删除</li></ul><h2 id="第三方授权登录"><a href="#第三方授权登录" class="headerlink" title="第三方授权登录"></a>第三方授权登录</h2><h3 id="OAuth-2-0"><a href="#OAuth-2-0" class="headerlink" title="OAuth 2.0"></a>OAuth 2.0</h3><p>为第三方应用颁发一个有时效性的token，使第三方应用能通过token得到用户的信息</p><ul><li>客户端向用户发送授权申请</li><li>用户同意授权</li><li>客户端使用获得的<strong>授权码</strong>，向认证服务器申请access token</li><li>认证服务器认证后，发放token</li><li>客户端使用token，向资源服务器申请资源</li><li>资源服务器确认token有效，发放资源</li></ul><p>授权码有效期一般为5-20min，只能使用一次</p><h3 id="二维码登录"><a href="#二维码登录" class="headerlink" title="二维码登录"></a>二维码登录</h3><p>扫码登录可以分为三个阶段：未扫描、已扫描待确认、已确认</p><ul><li>pc携带设备信息发送生成二维码请求至服务器</li><li>服务器生成二维码id，并和设备绑定，返回二维码id</li><li>pc启动定时任务轮询服务器二维码状态，直到成功</li><li>用户扫描二维码，将手机登录凭证(token)和二维码id发送给服务器</li><li>服务器将二维码id和用户身份信息绑定，返回临时token至用户</li><li>用户携带临时token确认登录</li><li>服务器更改二维码状态为已确认，生成pc端token</li><li>pc由于一直在轮询二维码状态，所以会得到token，后续可以凭借token访问服务端api</li></ul><h2 id="优惠券系统"><a href="#优惠券系统" class="headerlink" title="优惠券系统"></a>优惠券系统</h2><p>券模板、券记录都需要持久化</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>HashMap并发问题探究</title>
    <link href="/2024/08/22/hashmap/"/>
    <url>/2024/08/22/hashmap/</url>
    
    <content type="html"><![CDATA[<blockquote><p>字节面试官问了一个问题，为什么实习的项目里用ConcurrentHashMap而不是HashMap，这个map只是单线程在更新，其实用普通的HashMap也可以？我回答的是并发写的时候会有问题，应该不太对。下面使用jdk 1.8来验证一下。</p></blockquote><p>其实我的实习项目里是先更新数据库，然后增量更新缓存。如果主线程和定时任务都在更新缓存的话，是会有写写并发的问题的。但这应该不是主要的原因。（写写并发带来的是脏数据和数据丢失的问题）。</p><p>真正的原因应该是主线程的读和定时任务的写并发时带来的问题</p><ul><li>数据可见性：put操作不一定会被get看到</li><li>错误数据：扩容rehash的过程中get可能返回错误的数据</li><li>死循环：主要是在rehash的过程中</li></ul><hr><h2 id="写写并发"><a href="#写写并发" class="headerlink" title="写写并发"></a>写写并发</h2><p>下面举个例子，2个线程往map里面put，跑100次，ConcurrentHashMap不会出现并发问题，但是HashMap会出现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">putTask</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">getTask</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">step</span> <span class="hljs-operator">=</span> <span class="hljs-number">1000</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hashMapConcurrentWrite</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    Map&lt;Item, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-type">CountDownLatch</span> <span class="hljs-variable">countDownLatch</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CountDownLatch</span>(putTask);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">taskId</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; taskId &lt; putTask; taskId++) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">finalTaskId</span> <span class="hljs-operator">=</span> taskId;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> finalTaskId * step;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> start + step;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> start; i &lt; end; i++) &#123;<br>                    map.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Item</span>(i), i);<br>                &#125;<br>                countDownLatch.countDown();<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;test-&quot;</span> + taskId).start();<br>    &#125;<br>    countDownLatch.await();<br>    System.out.println(map.size());<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testHashMapConcurrentWrite</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.printf(<span class="hljs-string">&quot;i = %d &quot;</span>, i);<br>            hashMapConcurrentWrite();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="脏数据、数据丢失"><a href="#脏数据、数据丢失" class="headerlink" title="脏数据、数据丢失"></a>脏数据、数据丢失</h3><p>正确的数量应该是2000个，但是实际的数量往往比2000小</p><h3 id="StackOverFlowError"><a href="#StackOverFlowError" class="headerlink" title="StackOverFlowError"></a>StackOverFlowError</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">Exception <span class="hljs-keyword">in</span> thread <span class="hljs-string">&quot;test-0&quot;</span> Exception <span class="hljs-keyword">in</span> thread <span class="hljs-string">&quot;test-1&quot;</span> java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.StackOverflowError</span><br>at java<span class="hljs-selector-class">.util</span>.HashMap<span class="hljs-variable">$TreeNode</span><span class="hljs-selector-class">.find</span>(HashMap<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1901</span>)<br>    ...<br></code></pre></td></tr></table></figure><h3 id="ClassCastException"><a href="#ClassCastException" class="headerlink" title="ClassCastException"></a>ClassCastException</h3><p>在Node转为TreeNode的时候，出现类转换异常</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs stylus">test-<span class="hljs-number">0</span> ClassCastException caught: java<span class="hljs-selector-class">.util</span>.HashMap<span class="hljs-variable">$Node</span> cannot be cast to java<span class="hljs-selector-class">.util</span>.HashMap<span class="hljs-variable">$TreeNode</span><br>java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.ClassCastException</span>: java<span class="hljs-selector-class">.util</span>.HashMap<span class="hljs-variable">$Node</span> cannot be cast to java<span class="hljs-selector-class">.util</span>.HashMap<span class="hljs-variable">$TreeNode</span><br>at java<span class="hljs-selector-class">.util</span>.HashMap<span class="hljs-variable">$TreeNode</span><span class="hljs-selector-class">.moveRootToFront</span>(HashMap<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1859</span>)<br>at java<span class="hljs-selector-class">.util</span>.HashMap<span class="hljs-variable">$TreeNode</span><span class="hljs-selector-class">.treeify</span>(HashMap<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1975</span>)<br>at java<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.HashMap</span><span class="hljs-selector-class">.treeifyBin</span>(HashMap<span class="hljs-selector-class">.java</span>:<span class="hljs-number">773</span>)<br>at java<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.HashMap</span><span class="hljs-selector-class">.putVal</span>(HashMap<span class="hljs-selector-class">.java</span>:<span class="hljs-number">645</span>)<br>at java<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.HashMap</span><span class="hljs-selector-class">.put</span>(HashMap<span class="hljs-selector-class">.java</span>:<span class="hljs-number">613</span>)<br>at org<span class="hljs-selector-class">.example</span>.HashMapTest$<span class="hljs-number">1</span><span class="hljs-selector-class">.run</span>(HashMapTest<span class="hljs-selector-class">.java</span>:<span class="hljs-number">42</span>)<br>at java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.Thread</span><span class="hljs-selector-class">.run</span>(Thread<span class="hljs-selector-class">.java</span>:<span class="hljs-number">750</span>)<br>test-<span class="hljs-number">1</span> ClassCastException caught: java<span class="hljs-selector-class">.util</span>.HashMap<span class="hljs-variable">$Node</span> cannot be cast to java<span class="hljs-selector-class">.util</span>.HashMap<span class="hljs-variable">$TreeNode</span><br>java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.ClassCastException</span>: java<span class="hljs-selector-class">.util</span>.HashMap<span class="hljs-variable">$Node</span> cannot be cast to java<span class="hljs-selector-class">.util</span>.HashMap<span class="hljs-variable">$TreeNode</span><br>at java<span class="hljs-selector-class">.util</span>.HashMap<span class="hljs-variable">$TreeNode</span><span class="hljs-selector-class">.moveRootToFront</span>(HashMap<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1859</span>)<br>at java<span class="hljs-selector-class">.util</span>.HashMap<span class="hljs-variable">$TreeNode</span><span class="hljs-selector-class">.treeify</span>(HashMap<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1975</span>)<br>at java<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.HashMap</span><span class="hljs-selector-class">.treeifyBin</span>(HashMap<span class="hljs-selector-class">.java</span>:<span class="hljs-number">773</span>)<br>at java<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.HashMap</span><span class="hljs-selector-class">.putVal</span>(HashMap<span class="hljs-selector-class">.java</span>:<span class="hljs-number">645</span>)<br>at java<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.HashMap</span><span class="hljs-selector-class">.put</span>(HashMap<span class="hljs-selector-class">.java</span>:<span class="hljs-number">613</span>)<br>at org<span class="hljs-selector-class">.example</span>.HashMapTest$<span class="hljs-number">1</span><span class="hljs-selector-class">.run</span>(HashMapTest<span class="hljs-selector-class">.java</span>:<span class="hljs-number">42</span>)<br></code></pre></td></tr></table></figure><h3 id="死循环"><a href="#死循环" class="headerlink" title="死循环"></a>死循环</h3><hr><h2 id="HashMap原理"><a href="#HashMap原理" class="headerlink" title="HashMap原理"></a>HashMap原理</h2><h3 id="put"><a href="#put" class="headerlink" title="put"></a>put</h3><p>之前一直没搞懂put的树化到底是桶上已经插入了7个结点还是8个，答案应该是在<strong>已经</strong>插入8个结点的时候，<strong>要插入第9个结点的时候</strong>，会先将这个节点尾插至链表，然后<code>treeifyBin</code>，但是真正的树化需要目前已有的桶的数量等于<code>MIN_TREEIFY_CAPACITY</code>（一般是64）才可以，否则只是二倍扩容。</p><p>一个小测试，通过重写hashCode的方法，使得元素hash后只会存在hashCode为0和1的两个桶。下面这个只会在<code>i = 17</code>的时候树化，当<code>i = 16</code>的时候，由于桶的数量还没有到64，只有32，所以会先扩容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Item</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    Item(<span class="hljs-type">int</span> id) &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id % <span class="hljs-number">2</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testTreeify</span><span class="hljs-params">()</span> &#123;<br>    Map&lt;Item, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br>        map.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Item</span>(i), i);<br>    &#125;<br><br>    System.out.println(map.size());<br>&#125;<br></code></pre></td></tr></table></figure><p>其实这个例子会经过三次扩容，然后插入第18个元素（<code>i = 17</code>）才树化</p><ul><li>第一次扩容：插入第1个元素，容量变为16，阈值为12</li><li>第二次扩容：插入第13个元素，容量变为32，阈值为24</li><li>第三次扩容：插入第17个元素（<code>i = 16</code>），容量变为64，阈值变为48</li><li>再多插入一个元素，就扩容了</li></ul><p>下面对put的源码进行剖析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> V <span class="hljs-title function_">put</span><span class="hljs-params">(K key, V value)</span> &#123;<br>    <span class="hljs-keyword">return</span> putVal(hash(key), key, value, <span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>);<br>&#125;<br><span class="hljs-keyword">final</span> V <span class="hljs-title function_">putVal</span><span class="hljs-params">(<span class="hljs-type">int</span> hash, K key, V value, <span class="hljs-type">boolean</span> onlyIfAbsent,</span><br><span class="hljs-params">                <span class="hljs-type">boolean</span> evict)</span> &#123;<br>    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="hljs-type">int</span> n, i;<br>    <span class="hljs-keyword">if</span> ((tab = table) == <span class="hljs-literal">null</span> || (n = tab.length) == <span class="hljs-number">0</span>)<br>        n = (tab = resize()).length;<br>    <span class="hljs-keyword">if</span> ((p = tab[i = (n - <span class="hljs-number">1</span>) &amp; hash]) == <span class="hljs-literal">null</span>)<br>        tab[i] = newNode(hash, key, value, <span class="hljs-literal">null</span>);<br>    <span class="hljs-keyword">else</span> &#123;<br>        Node&lt;K,V&gt; e; K k;<br>        <span class="hljs-keyword">if</span> (p.hash == hash &amp;&amp;<br>            ((k = p.key) == key || (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k))))<br>            e = p;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p <span class="hljs-keyword">instanceof</span> TreeNode)<br>            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="hljs-built_in">this</span>, tab, hash, key, value);<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">binCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; ; ++binCount) &#123;<br>                <span class="hljs-keyword">if</span> ((e = p.next) == <span class="hljs-literal">null</span>) &#123;<br>                    p.next = newNode(hash, key, value, <span class="hljs-literal">null</span>);<br>                    <span class="hljs-keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="hljs-number">1</span>) <span class="hljs-comment">// -1 for 1st</span><br>                        treeifyBin(tab, hash);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (e.hash == hash &amp;&amp;<br>                    ((k = e.key) == key || (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k))))<br>                    <span class="hljs-keyword">break</span>;<br>                p = e;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (e != <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// existing mapping for key</span><br>            <span class="hljs-type">V</span> <span class="hljs-variable">oldValue</span> <span class="hljs-operator">=</span> e.value;<br>            <span class="hljs-keyword">if</span> (!onlyIfAbsent || oldValue == <span class="hljs-literal">null</span>)<br>                e.value = value;<br>            afterNodeAccess(e);<br>            <span class="hljs-keyword">return</span> oldValue;<br>        &#125;<br>    &#125;<br>    ++modCount;<br>    <span class="hljs-keyword">if</span> (++size &gt; threshold)<br>        resize();<br>    afterNodeInsertion(evict);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="resize扩容"><a href="#resize扩容" class="headerlink" title="resize扩容"></a>resize扩容</h3><p>HashMap在new的时候其实不会真的给元素分配内存，而是有点lazy init的感觉，当插入第一个元素的时候，调用resize方法去分配空间。</p><p><strong>假设我们没有指定初始容量</strong></p><p>第一次扩容的时候</p><ul><li>oldTab: null</li><li>oldCap: 0</li><li>oldThr: 0</li></ul><p>之后会进入else分支</p><ul><li>newCap: DEFAULT_INITIAL_CAPACITY(16)</li><li>newThr: 12</li></ul><p>第二次扩容的时候</p><ul><li>oldTab: not null</li><li>oldCap: 16</li><li>oldThr: 12</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;<br>    Node&lt;K,V&gt;[] oldTab = table;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">oldCap</span> <span class="hljs-operator">=</span> (oldTab == <span class="hljs-literal">null</span>) ? <span class="hljs-number">0</span> : oldTab.length;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">oldThr</span> <span class="hljs-operator">=</span> threshold;<br>    <span class="hljs-type">int</span> newCap, newThr = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (oldCap &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;<br>            threshold = Integer.MAX_VALUE;<br>            <span class="hljs-keyword">return</span> oldTab;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="hljs-number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;<br>                    oldCap &gt;= DEFAULT_INITIAL_CAPACITY)<br>            newThr = oldThr &lt;&lt; <span class="hljs-number">1</span>; <span class="hljs-comment">// double threshold</span><br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (oldThr &gt; <span class="hljs-number">0</span>) <span class="hljs-comment">// initial capacity was placed in threshold</span><br>        newCap = oldThr;<br>    <span class="hljs-keyword">else</span> &#123;               <span class="hljs-comment">// zero initial threshold signifies using defaults</span><br>        newCap = DEFAULT_INITIAL_CAPACITY;<br>        newThr = (<span class="hljs-type">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (newThr == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-type">float</span> <span class="hljs-variable">ft</span> <span class="hljs-operator">=</span> (<span class="hljs-type">float</span>)newCap * loadFactor;<br>        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="hljs-type">float</span>)MAXIMUM_CAPACITY ?<br>                    (<span class="hljs-type">int</span>)ft : Integer.MAX_VALUE);<br>    &#125;<br>    threshold = newThr;<br>    <span class="hljs-comment">//...</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k8s搭建mysql集群</title>
    <link href="/2024/05/05/k8s%E6%90%AD%E5%BB%BAmysql%E9%9B%86%E7%BE%A4/"/>
    <url>/2024/05/05/k8s%E6%90%AD%E5%BB%BAmysql%E9%9B%86%E7%BE%A4/</url>
    
    <content type="html"><![CDATA[<p>一台32G内存的Ubuntu 22.04机器上起了三个虚拟机搭建mysql集群。</p> <span id="more"></span><p>| 最近在做一些微服务相关的工作，于是五一花了2.5天时间搭了个一主二从mysql集群。整个过程相当曲折，四处碰壁。搭完后就想着记录一下。</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>物理机配置</p><ul><li>内存：32GB</li><li>CPU：20核</li><li>操作系统：Ubuntu 22.04</li></ul><p>虚拟机配置</p><ul><li>CPU: 4核</li><li>内存：4G</li><li>存储：30G</li><li>基础镜像：ubuntu-22.04.4-live-server-amd64.iso</li><li>k8s version: v1.29</li></ul><h1 id="虚拟机创建"><a href="#虚拟机创建" class="headerlink" title="虚拟机创建"></a>虚拟机创建</h1><p>虚拟机之间使用网桥通信。因此需要在宿主机上先创建好虚拟机之间以及虚拟机和宿主机之间通信的网桥。网桥的ip地址为192.168.100.1。三个虚拟机的地址为192.168.100.2(k3s-master), 192.168.100.3(k3s-node1), 192.168.100.4(k3s-node2)。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 都在sudo下</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">ip </span>link <span class="hljs-built_in">add</span> name br0<span class="hljs-built_in"> type bridge</span><br><span class="hljs-built_in">ip </span>addr <span class="hljs-built_in">add</span> 192.168.100.1/24 brd + dev br0<span class="hljs-built_in"></span><br><span class="hljs-built_in">ip </span>link <span class="hljs-built_in">set</span> br0 up<br><br><span class="hljs-comment"># 开启 ip_forward</span><br>sysctl -w net.ipv4.<span class="hljs-attribute">ip_forward</span>=1<br><br><span class="hljs-comment"># 允许对从 br0 流入的数据包进行 FORWARD</span><br>iptables -t<span class="hljs-built_in"> filter </span>-A FORWARD -i br0 -j ACCEPT<br>iptables -t<span class="hljs-built_in"> filter </span>-A FORWARD -o br0 -j ACCEPT<br><br><span class="hljs-comment"># 也可以直接将 filter FORWARD 策略直接设置为 ACCEPT</span><br><span class="hljs-comment"># iptables -t filter -P FORWARD ACCEPT</span><br><br><span class="hljs-comment"># 开启 NAT</span><br>iptables -t<span class="hljs-built_in"> nat </span>-A POSTROUTING -o eno1 -j MASQUERADE<br></code></pre></td></tr></table></figure><p>准备虚拟磁盘</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">qemu-<span class="hljs-selector-tag">img</span> create -f qcow2 ubuntu-vm1<span class="hljs-selector-class">.qcow2</span> <span class="hljs-number">30</span>G<br></code></pre></td></tr></table></figure><p>创建虚拟机。其实创建虚拟机以及准备k8s相关的包，这些工作可以只在k3s-master上进行，之后把虚拟磁盘复制一下就好。因此下面只讲k3s-master的初始化工作。</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs livescript">qemu-system-x86_64 <span class="hljs-string">\</span><br>  -m <span class="hljs-number">4</span>G -smp <span class="hljs-number">4</span> <span class="hljs-string">\</span><br>  -cpu host,vmx=<span class="hljs-literal">on</span> <span class="hljs-string">\</span><br>  -hda ubuntu-vm1.qcow2 <span class="hljs-string">\</span><br>  -cdrom ubuntu-<span class="hljs-number">22.04</span>.<span class="hljs-number">4</span>-live-server-amd64.iso <span class="hljs-string">\</span><br>  -boot d <span class="hljs-string">\</span><br>  -enable-kvm <span class="hljs-string">\</span><br>  -nic bridge,br=br0,model=virtio-net-pci <span class="hljs-string">\</span><br>  -daemonize<br></code></pre></td></tr></table></figure><p>启动虚拟机，需要在root用户下。为了方便，建议所有命令都在root用户下执行，不然会有权限问题。这里需要人为分配网卡的mac地址。</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs livescript">sudo qemu-system-x86_64 <span class="hljs-string">\</span><br>  -m <span class="hljs-number">4</span>G -smp <span class="hljs-number">4</span> <span class="hljs-string">\</span><br>  -cpu host,vmx=<span class="hljs-literal">on</span> <span class="hljs-string">\</span><br>  -hda ubuntu-vm1.qcow2 <span class="hljs-string">\</span><br>  -enable-kvm <span class="hljs-string">\</span><br>  -net nic,macaddr=<span class="hljs-number">52</span>:<span class="hljs-number">54</span>:<span class="hljs-number">00</span>:<span class="hljs-number">12</span>:<span class="hljs-number">34</span>:<span class="hljs-number">57</span> -net bridge,br=br0 <span class="hljs-string">\</span><br>  -daemonize<br></code></pre></td></tr></table></figure><p>这样之后可以ssh <a href="mailto:&#117;&#115;&#x65;&#114;&#x40;&#x31;&#57;&#x32;&#46;&#49;&#54;&#x38;&#46;&#x31;&#x30;&#48;&#46;&#50;">&#117;&#115;&#x65;&#114;&#x40;&#x31;&#57;&#x32;&#46;&#49;&#54;&#x38;&#46;&#x31;&#x30;&#48;&#46;&#50;</a>连接到虚拟机了。</p><p>根据官网教程，安装必要的包<br><a href="https://v1-29.docs.kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/">install-kubeadm</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt-get update<br><span class="hljs-comment"># apt-transport-https may be a dummy package; if so, you can skip that package</span><br><span class="hljs-built_in">sudo</span> apt-get install -y apt-transport-https ca-certificates curl gpg<br><br><span class="hljs-comment"># If the directory `/etc/apt/keyrings` does not exist, it should be created before the curl command, read the note below.</span><br><span class="hljs-comment"># sudo mkdir -p -m 755 /etc/apt/keyrings</span><br>curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key | <span class="hljs-built_in">sudo</span> gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg<br><br><span class="hljs-comment"># This overwrites any existing configuration in /etc/apt/sources.list.d/kubernetes.list</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /&#x27;</span> | <span class="hljs-built_in">sudo</span> <span class="hljs-built_in">tee</span> /etc/apt/sources.list.d/kubernetes.list<br><br><span class="hljs-built_in">sudo</span> apt-get update<br><span class="hljs-built_in">sudo</span> apt-get install -y kubelet kubeadm kubectl docker.io<br><span class="hljs-built_in">sudo</span> apt-mark hold kubelet kubeadm kubectl<br></code></pre></td></tr></table></figure><p>现在这个虚拟磁盘上已经有k8s必须的组件了。当想要启动k3s-node1和k3s-node2时，复制这个master的虚拟磁盘。</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-keyword">cp</span> -av ubuntu-vm1.qcow2 ubuntu-vm2.qcow2<br></code></pre></td></tr></table></figure><p>下面进行三个虚拟机的网络配置。需要为每个node分配一个独一无二的ip地址。可以用下面的命令来设置。但是下面的命令设置不能持久化到虚拟机，也就是说虚拟机重启时，配置的网桥和ip都会消失。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 进入虚拟机后配置网卡</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">ip </span>addr <span class="hljs-built_in">add</span> 192.168.100.2/24 brd + dev ens3<span class="hljs-built_in"></span><br><span class="hljs-built_in">ip route </span><span class="hljs-built_in">add</span><span class="hljs-built_in"> default </span>via 192.168.100.1 dev ens3<br><br><span class="hljs-comment"># 按需修改 /etc/resolv.conf 配置 DNS 服务器，不改的话只能ping ip地址</span><br>nameserver 8.8.8.8<br></code></pre></td></tr></table></figure><p>如何持久化网络配置呢？</p><p>ubuntu需要修改<code>/etc/netplan/00-installer-config.yaml</code>文件。其实这个操作可以在复制虚拟磁盘前完成，之后在每个虚拟机里面修改这个文件里的ip地址就好了。</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">network</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">ethernets</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">ens3</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-comment">#dhcp4: true</span><br>      <span class="hljs-attribute">addresses</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[192.168.100.2/24]</span><br>      <span class="hljs-attribute">nameservers</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">addresses</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[8.8.8.8]</span><br>      <span class="hljs-attribute">routes</span><span class="hljs-punctuation">:</span><br>       <span class="hljs-bullet">-</span> <span class="hljs-string">to: default</span><br>         <span class="hljs-attribute">via</span><span class="hljs-punctuation">:</span> <span class="hljs-string">192.168.100.1</span><br>  <span class="hljs-attribute">version</span><span class="hljs-punctuation">:</span> <span class="hljs-string">2</span><br></code></pre></td></tr></table></figure><h1 id="k8s集群"><a href="#k8s集群" class="headerlink" title="k8s集群"></a>k8s集群</h1><p>首先需要做一些准备工作，在三个节点上都需要做。因为有些东西是过时的，需要修改。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 禁止swap，非常重要</span><br>swapoff -a<br><br><span class="hljs-comment"># 修改容器运行时，不然会说找不到dockershim（已经被弃用了）</span><br><span class="hljs-comment"># ERRO[0000] validate service connection: validate CRI v1 image API for endpoint &quot;unix:///var/run/dockershim.sock&quot;</span><br>crictl config runtime-endpoint unix:<span class="hljs-regexp">//</span><span class="hljs-regexp">/var/</span>run<span class="hljs-regexp">/containerd/</span>containerd.sock<br>crictl config image-endpoint unix:<span class="hljs-regexp">//</span><span class="hljs-regexp">/run/</span>containerd/containerd.sock<br><br><br><span class="hljs-comment"># detected that the sandbox image &quot;registry.k8s.io/pause:3.8&quot; of the container runtime is inconsistent with that used by kubeadm. It is recommended that using &quot;registry.k8s.io/pause:3.9&quot; as the CRI sandbox image.</span><br><br>sudo mkdir <span class="hljs-regexp">/etc/</span>containerd<br>containerd config default | sudo tee <span class="hljs-regexp">/etc/</span>containerd/config.toml<br>sudo vim <span class="hljs-regexp">/etc/</span>containerd/config.toml<br>修改sandbox_image = <span class="hljs-string">&quot;registry.aliyuncs.com/google_containers/pause:3.9&quot;</span><br>修改cgroup相关的为SystemdCgroup = true<br>systemctl restart containerd<br><br><span class="hljs-regexp">/etc/</span>sysconfig/kubelet文件内容<br>KUBELET_EXTRA_ARGS=<span class="hljs-string">&quot;--fail-swap-on=false --cgroup-driver=systemd&quot;</span><br></code></pre></td></tr></table></figure><p>可以通过kubeadm init一个master节点，然后kubeadm join就行。但是kubeadm init默认文件的ip地址之类的很多是不对的。因此我们需要修改。最简单的方式就是在默认的配置文件基础上改。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 得到默认配置文件</span><br>kubeadm<span class="hljs-built_in"> config </span><span class="hljs-built_in">print</span> init-defaults &gt; kubeadm.yaml<br></code></pre></td></tr></table></figure><p>由于k8s镜像仓库的地址在国内一般访问不了，所以需要换源。在yaml文件里修改为阿里云的镜像源。</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">imageRepository:</span> registry.aliyuncs.com/google_containers<br></code></pre></td></tr></table></figure><p>由于我们的master ip为192.168.100.2，因此也需要修改yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">localAPIEndpoint:</span><br>  <span class="hljs-attr">advertiseAddress:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.100</span><span class="hljs-number">.2</span><br>  <span class="hljs-attr">bindPort:</span> <span class="hljs-number">6443</span><br><span class="hljs-attr">nodeRegistration:</span><br>  <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">k3s-master</span><br></code></pre></td></tr></table></figure><p>由于需要网络插件，因此yaml里面也需要修改。我们使用flannel网络插件。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">networking:</span><br><span class="hljs-symbol">  dnsDomain:</span> cluster.local<br><span class="hljs-symbol">  serviceSubnet:</span> <span class="hljs-number">10.96</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>/<span class="hljs-number">12</span><br><span class="hljs-symbol">  podSubnet:</span> <span class="hljs-number">10.244</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>/<span class="hljs-number">16</span>  <span class="hljs-meta"># flannel网络插件使用的地址</span><br></code></pre></td></tr></table></figure><p>之后便可以通过</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">kubeadm init <span class="hljs-comment">--config kubeadm.conf</span><br></code></pre></td></tr></table></figure><p>初始化之后会输出，在其他两个节点上join就行。</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">To <span class="hljs-built_in">start</span> <span class="hljs-keyword">using</span> your cluster, you need <span class="hljs-built_in">to</span> run <span class="hljs-keyword">the</span> following <span class="hljs-keyword">as</span> <span class="hljs-keyword">a</span> regular user:<br><br>  mkdir -p $HOME/.kube<br>  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config<br>  sudo chown $(id -u):$(id -g) $HOME/.kube/config<br><br>Alternatively, <span class="hljs-keyword">if</span> you are <span class="hljs-keyword">the</span> root user, you can run:<br><br>  export KUBECONFIG=/etc/kubernetes/admin.conf<br><br>You should now deploy <span class="hljs-keyword">a</span> pod network <span class="hljs-built_in">to</span> <span class="hljs-keyword">the</span> cluster.<br>Run <span class="hljs-string">&quot;kubectl apply -f [podnetwork].yaml&quot;</span> <span class="hljs-keyword">with</span> <span class="hljs-literal">one</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> options listed <span class="hljs-keyword">at</span>:<br>  <span class="hljs-keyword">https</span>://kubernetes.io/docs/concepts/cluster-administration/addons/<br><br>Then you can join <span class="hljs-keyword">any</span> <span class="hljs-built_in">number</span> <span class="hljs-keyword">of</span> worker nodes <span class="hljs-keyword">by</span> running <span class="hljs-keyword">the</span> following <span class="hljs-keyword">on</span> <span class="hljs-title">each</span> <span class="hljs-title">as</span> <span class="hljs-title">root</span>:<br><br>kubeadm join <span class="hljs-number">192.168</span><span class="hljs-number">.100</span><span class="hljs-number">.2</span>:<span class="hljs-number">6443</span> <span class="hljs-comment">--token abcdef.0123456789abcdef \</span><br><span class="hljs-comment">--discovery-token-ca-cert-hash sha256:ee49df999fb57ffc9239a754854efc0be50ab9e586b40327c0008508ce8c6dd2 </span><br></code></pre></td></tr></table></figure><p>网络插件使用flannel。自行下载。</p><p>如果想要使用dashboard的话，可以下载<a href="https://github.com/kubernetes/dashboard/blob/master/docs/user/access-control/creating-sample-user.md">插件</a>。<br>创建dashboard.yaml，用NodePort暴露服务，访问<a href="https://192.168.100.2:30002/">https://192.168.100.2:30002</a> 查看。token的话，用<code>kubectl -n kubernetes-dashboard create token admin-user</code>生成就行，然后输入。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">admin-user</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kubernetes-dashboard</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRoleBinding</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">admin-user</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">cluster-admin</span><br><span class="hljs-attr">subjects:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">admin-user</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kubernetes-dashboard</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kubernetes-dashboard-kong-proxy</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kubernetes-dashboard</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">kong-proxy-tls</span><br>    <span class="hljs-attr">nodePort:</span> <span class="hljs-number">30002</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">443</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">8443</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br><br></code></pre></td></tr></table></figure><h1 id="mysql集群"><a href="#mysql集群" class="headerlink" title="mysql集群"></a>mysql集群</h1><ul><li>mysql: 8.0.18</li><li>存储：Local PV</li><li>master写，slave读。</li></ul><h2 id="pv准备"><a href="#pv准备" class="headerlink" title="pv准备"></a>pv准备</h2><p>使用了Local PV。rook一直失败。</p><p>首先创建storageclass</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">kind:</span> StorageClass<br><span class="hljs-symbol">apiVersion:</span> storage.k8s.io/v1<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> local<br><span class="hljs-symbol">provisioner:</span> kubernetes.io/no-provisioner<br><span class="hljs-symbol">volumeBindingMode:</span> WaitForFirstConsumer<br></code></pre></td></tr></table></figure><p>然后创建三个pv。每个2GB</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">PersistentVolume</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">mysql-pv0</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">mysql</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">capacity:</span><br>    <span class="hljs-attr">storage:</span> <span class="hljs-string">2Gi</span><br>  <span class="hljs-attr">accessModes:</span> [<span class="hljs-string">&quot;ReadWriteOnce&quot;</span>]<br>  <span class="hljs-attr">persistentVolumeReclaimPolicy:</span> <span class="hljs-string">Retain</span><br>  <span class="hljs-attr">storageClassName:</span> <span class="hljs-string">local</span><br>  <span class="hljs-attr">local:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/mysql-data/0</span><br>  <span class="hljs-attr">nodeAffinity:</span><br>    <span class="hljs-attr">required:</span><br>      <span class="hljs-attr">nodeSelectorTerms:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">matchExpressions:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">kubernetes.io/hostname</span><br>          <span class="hljs-attr">operator:</span> <span class="hljs-string">In</span><br>          <span class="hljs-attr">values:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">k3s-master</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">PersistentVolume</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">mysql-pv1</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">mysql</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">capacity:</span><br>    <span class="hljs-attr">storage:</span> <span class="hljs-string">2Gi</span><br>  <span class="hljs-attr">accessModes:</span> [<span class="hljs-string">&quot;ReadWriteOnce&quot;</span>]<br>  <span class="hljs-attr">persistentVolumeReclaimPolicy:</span> <span class="hljs-string">Retain</span><br>  <span class="hljs-attr">storageClassName:</span> <span class="hljs-string">local</span><br>  <span class="hljs-attr">local:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/mysql-data/1</span><br>  <span class="hljs-attr">nodeAffinity:</span><br>    <span class="hljs-attr">required:</span><br>      <span class="hljs-attr">nodeSelectorTerms:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">matchExpressions:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">kubernetes.io/hostname</span><br>          <span class="hljs-attr">operator:</span> <span class="hljs-string">In</span><br>          <span class="hljs-attr">values:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">k3s-node1</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">PersistentVolume</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">mysql-pv2</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">mysql</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">capacity:</span><br>    <span class="hljs-attr">storage:</span> <span class="hljs-string">2Gi</span><br>  <span class="hljs-attr">accessModes:</span> [<span class="hljs-string">&quot;ReadWriteOnce&quot;</span>]<br>  <span class="hljs-attr">persistentVolumeReclaimPolicy:</span> <span class="hljs-string">Retain</span><br>  <span class="hljs-attr">storageClassName:</span> <span class="hljs-string">local</span><br>  <span class="hljs-attr">local:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/mysql-data/2</span><br>  <span class="hljs-attr">nodeAffinity:</span><br>    <span class="hljs-attr">required:</span><br>      <span class="hljs-attr">nodeSelectorTerms:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">matchExpressions:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">kubernetes.io/hostname</span><br>          <span class="hljs-attr">operator:</span> <span class="hljs-string">In</span><br>          <span class="hljs-attr">values:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">k3s-node2</span><br></code></pre></td></tr></table></figure><h2 id="mysql准备"><a href="#mysql准备" class="headerlink" title="mysql准备"></a>mysql准备</h2><p>首先准备configmap，这里必须使用default_authentication_plugin&#x3D; mysql_native_password。不然后面会没办法登录。mysql8.0开始默认使用caching_sha2_password加密规则，不修改的话后面权限会出问题。</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">mysql</span><br>  <span class="hljs-attribute">labels</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">mysql</span><br><span class="hljs-attribute">data</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">master.cnf</span><span class="hljs-punctuation">:</span> <span class="hljs-string">|</span><br>    <span class="hljs-comment"># 主节点 mysql 的配置文件</span><br>    <span class="hljs-attribute">[mysqld]</span><br><span class="hljs-attribute">    log-bin</span><br><span class="hljs-attribute">    default_authentication_plugin= mysql_native_password</span><br><span class="hljs-attribute">  slave.cnf</span><span class="hljs-punctuation">:</span> <span class="hljs-string">|</span><br>    <span class="hljs-comment"># 从节点 mysql 的配置文件</span><br>    [mysqld]<br>    super-read-only<br>    default_authentication_plugin= mysql_native_password<br></code></pre></td></tr></table></figure><p>创建两个服务，其中一个是headless服务</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">mysql-read</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">mysql</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">mysql</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">3306</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">mysql</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">mysql</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">mysql</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">mysql</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">3306</span><br>  <span class="hljs-attr">clusterIP:</span> <span class="hljs-string">None</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">mysql</span><br></code></pre></td></tr></table></figure><p>mysql集群搭建。使用免密登录方式。initcontainer负责copy配置信息。mysql-sync负责从主库同步。其实《深入剖析k8s》那本书很多东西都过时了，因此改了很多。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">StatefulSet</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">mysql</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">mysql</span><br>  <span class="hljs-attr">serviceName:</span> <span class="hljs-string">mysql</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">3</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">mysql</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">initContainers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">init-mysql</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">mysql:8.0.18</span><br>        <span class="hljs-attr">command:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">bash</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;-c&quot;</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">|</span><br><span class="hljs-string">          set -ex</span><br><span class="hljs-string">          # 从 Pod 的序号，生成 server-id</span><br><span class="hljs-string">          # [[ `hostname` =~ -([0-9]+)$ ]] || exit 1</span><br><span class="hljs-string">          [[ `echo $HOSTNAME` =~ -([0-9]+)$ ]] || exit 1</span><br><span class="hljs-string">          ordinal=$&#123;BASH_REMATCH[1]&#125;</span><br><span class="hljs-string">          echo [mysqld] &gt; /mnt/conf.d/server-id.cnf</span><br><span class="hljs-string">          # 由于 server-id=0 有特殊含义，我们给 ID 加一个 100 来避开它</span><br><span class="hljs-string">          echo server-id=$((100 + $ordinal)) &gt;&gt; /mnt/conf.d/server-id.cnf</span><br><span class="hljs-string">          # 如果 Pod 序号是 0，说明它是 Master 节点，从 ConfigMap 里把 Master 的配置文件拷贝到 /mnt/conf.d/ 目录；</span><br><span class="hljs-string">          # 否则，拷贝 Slave 的配置文件</span><br><span class="hljs-string">          if [[ $ordinal -eq 0 ]]; then</span><br><span class="hljs-string">            cp /mnt/config-map/master.cnf /mnt/conf.d/</span><br><span class="hljs-string">          else</span><br><span class="hljs-string">            cp /mnt/config-map/slave.cnf /mnt/conf.d/</span><br><span class="hljs-string">          fi</span><br><span class="hljs-string"></span>        <span class="hljs-attr">volumeMounts:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">conf</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/mnt/conf.d</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">config-map</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/mnt/config-map</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">mysql</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">mysql:8.0.18</span><br>        <span class="hljs-attr">env:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">MYSQL_ALLOW_EMPTY_PASSWORD</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;1&quot;</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">mysql</span><br>          <span class="hljs-attr">containerPort:</span> <span class="hljs-number">3306</span><br>        <span class="hljs-attr">volumeMounts:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">data</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/var/lib/mysql</span><br>          <span class="hljs-attr">subPath:</span> <span class="hljs-string">mysql</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">conf</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/etc/mysql/conf.d</span><br>        <span class="hljs-attr">resources:</span><br>          <span class="hljs-attr">requests:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">500m</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">1Gi</span><br>        <span class="hljs-attr">livenessProbe:</span><br>          <span class="hljs-attr">exec:</span><br>            <span class="hljs-attr">command:</span> [<span class="hljs-string">&quot;mysqladmin&quot;</span>, <span class="hljs-string">&quot;ping&quot;</span>]<br>          <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">30</span><br>          <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">10</span><br>          <span class="hljs-attr">timeoutSeconds:</span> <span class="hljs-number">5</span><br>        <span class="hljs-attr">readinessProbe:</span><br>          <span class="hljs-attr">exec:</span><br>            <span class="hljs-comment"># 通过 TCP 连接的方式进行健康检查</span><br>            <span class="hljs-attr">command:</span> [<span class="hljs-string">&quot;mysql&quot;</span>, <span class="hljs-string">&quot;-h&quot;</span>, <span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-string">&quot;-e&quot;</span>, <span class="hljs-string">&quot;SELECT 1&quot;</span>]<br>          <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">5</span><br>          <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">2</span><br>          <span class="hljs-attr">timeoutSeconds:</span> <span class="hljs-number">1</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">mysql-sync</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">mysql:8.0.18</span><br>        <span class="hljs-attr">command:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">bash</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;-c&quot;</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">|</span><br><span class="hljs-string">          set -ex</span><br><span class="hljs-string"></span><br>          [[ <span class="hljs-string">`echo</span> <span class="hljs-string">$HOSTNAME`</span> <span class="hljs-string">=~</span> <span class="hljs-string">-(</span>[<span class="hljs-number">0</span><span class="hljs-number">-9</span>]<span class="hljs-string">+)$</span> ]] <span class="hljs-string">||</span> <span class="hljs-string">exit</span> <span class="hljs-number">1</span><br>          <span class="hljs-string">ordinal=$&#123;BASH_REMATCH[1]&#125;</span><br>          <span class="hljs-string">if</span> [[ <span class="hljs-string">$ordinal</span> <span class="hljs-string">-eq</span> <span class="hljs-number">0</span> ]]<span class="hljs-string">;</span> <span class="hljs-string">then</span><br>            <span class="hljs-string">while</span> <span class="hljs-literal">true</span><span class="hljs-string">;</span> <span class="hljs-string">do</span> <span class="hljs-string">sleep</span> <span class="hljs-number">3600</span><span class="hljs-string">;</span> <span class="hljs-string">done;</span><br>          <span class="hljs-string">fi</span><br><br>          <span class="hljs-string">echo</span> <span class="hljs-string">&quot;Waiting for mysqld to be ready (accepting connections)&quot;</span><br>          <span class="hljs-string">until</span> <span class="hljs-string">mysql</span> <span class="hljs-string">-h</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> <span class="hljs-string">-e</span> <span class="hljs-string">&quot;SELECT 1&quot;</span><span class="hljs-string">;</span> <span class="hljs-string">do</span> <span class="hljs-string">sleep</span> <span class="hljs-number">1</span><span class="hljs-string">;</span> <span class="hljs-string">done</span><br><br>          <span class="hljs-string">MASTER_HOST=&#x27;mysql-0.mysql&#x27;</span><br><br>          <span class="hljs-string">result=$(mysql</span> <span class="hljs-string">-uroot</span> <span class="hljs-string">-h127.0.0.1</span> <span class="hljs-string">-e</span> <span class="hljs-string">&quot;SHOW SLAVE STATUS\G&quot;</span><span class="hljs-string">)</span><br>          <span class="hljs-string">if</span> [[ <span class="hljs-string">$result</span> <span class="hljs-string">==</span> <span class="hljs-string">*&quot;Slave_IO_Running:</span> <span class="hljs-literal">Yes</span><span class="hljs-string">&quot;* &amp;&amp; $result == *&quot;</span><span class="hljs-attr">Slave_SQL_Running:</span> <span class="hljs-literal">Yes</span><span class="hljs-string">&quot;* ]]; then</span><br><span class="hljs-string">            echo &quot;</span><span class="hljs-string">recover</span> <span class="hljs-string">START</span> <span class="hljs-string">SLAVE</span> <span class="hljs-string">&quot;</span><br><span class="hljs-string">          else</span><br><span class="hljs-string">            mysql -uroot -h127.0.0.1 -e &quot;</span><span class="hljs-string">CHANGE</span> <span class="hljs-string">MASTER</span> <span class="hljs-string">TO</span> <span class="hljs-string">MASTER_HOST=&#x27;$</span>&#123;<span class="hljs-string">MASTER_HOST</span>&#125;<span class="hljs-string">&#x27;,MASTER_USER=&#x27;</span><span class="hljs-string">root&#x27;</span>,<span class="hljs-string">MASTER_CONNECT_RETRY=10;START</span> <span class="hljs-string">SLAVE;&quot;</span><br>          <span class="hljs-string">fi</span><br><br>          <span class="hljs-string">while</span> <span class="hljs-literal">true</span><span class="hljs-string">;</span> <span class="hljs-string">do</span> <span class="hljs-string">sleep</span> <span class="hljs-number">3600</span><span class="hljs-string">;</span> <span class="hljs-string">done</span><br><br>        <span class="hljs-attr">volumeMounts:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">data</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/var/lib/mysql</span><br>          <span class="hljs-attr">subPath:</span> <span class="hljs-string">mysql</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">conf</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/etc/mysql/conf.d</span><br>      <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">conf</span><br>        <span class="hljs-attr">emptyDir:</span> &#123;&#125;<br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">config-map</span><br>        <span class="hljs-attr">configMap:</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">mysql</span><br>  <span class="hljs-attr">volumeClaimTemplates:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">data</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">accessModes:</span> [<span class="hljs-string">&quot;ReadWriteOnce&quot;</span>]<br>      <span class="hljs-attr">storageClassName:</span> <span class="hljs-string">&quot;local&quot;</span><br>      <span class="hljs-attr">resources:</span><br>        <span class="hljs-attr">requests:</span><br>          <span class="hljs-attr">storage:</span> <span class="hljs-string">2Gi</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
