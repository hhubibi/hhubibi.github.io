<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/09/07/Java/"/>
    <url>/2024/09/07/Java/</url>
    
    <content type="html"><![CDATA[<ol><li><p>什么是反射？为什么要反射？反射怎么实现的？为什么反射效率低？怎么提高反射的效率？<br><strong>什么是反射？</strong><br><br>Java的反射是在程序运行时动态地加载类并获取类的详细信息，从而操作类的方法和字段。本质上是通过获得<strong>Class</strong>对象之后，再通过class对象进行反编译，从而获取对象的各种信息。<br>反射的包基本在java.lang.reflect.*下。<br><strong>为什么要反射？</strong><br><br>因为Java需要先编译再运行，程序中对象的类型在编译的时候就确定了。由于一些类因为之前用不到，所以JVM没有给他加载进来，而如果想在运行的时候动态地使用一些类，那就需要反射，反射不需要在编译期提前知道运行的对象是谁。</p><p>也就是说，如果我们在编译的时候知道类或对象的信息，则可以直接使用，而不需要反射。否则，则需要反射。</p><p><strong>优点：</strong><br><br>对于java这种先编译再运行的语言，可以很方便地创建灵活的代码。 比如配合配置文件，可以在不修改代码，只修改配置文件的情况下，完成对实现类的切换。<br><strong>缺点：</strong><br></p><ol><li>性能很低。JVM编译的时候无法对反射的代码进行优化，而且需要额外的检查，因此效率会低很多。</li><li>反射会跳过权限检查，导致安全风险。</li><li>会模糊程序内部的逻辑。</li></ol><p><strong>如何提高反射的效率？</strong><br></p><ol><li>不要使用getMethods()、getFields()这样的方法后再去遍历找，而是直接传入方法名methodName、字段名fieldName，直接获取。</li><li>在本地增加缓存，保存Class对象，而不要每次都Class.forName()加载</li><li>把反射变为直接调用，如CGLIB的FastClass，在方法和number之间建立数字索引。</li></ol><p><strong>如何获得Class对象？</strong><br></p><ol><li>通过Class.forName()来得到类的class对象</li><li>通过 对象.getClass()方法来得到类对象</li><li>类型.class可以得到<br><strong>得到Class对象后，一般需要实例化类对象才能操作，所以怎么实例化？</strong><br><br>通过Class对象的newInstance()方法</li></ol></li><li><p>什么是动态代理？JDK动态代理以及CGLIB的动态代理？<br>动态代理就是在程序运行期间，创建目标的代理对象，实现代理对象的功能增强的一种技术。</p><ol><li>JDK的动态代理</li></ol><ul><li>需要实现InvocationHandler接口，并重写invoke方法，三个参数，类加载器、传入的method以及方法的参数。</li><li>然后通过Proxy.newProxyInstance()来创建代理对象。它需要传入类加载器、代理对象实现的接口以及代理对象本身。</li></ul><p><strong>限制：</strong> JDK的动态代理只能代理实现了接口的类，其他的无法代理。</p><ol start="2"><li>CGLIB的动态代理<br>是通过修改字节码生成子类来实现的。它会继承被代理的类。<br>CGLIB的核心是 MethodInterceptor 接口和 Enhancer 类是核心。<ol><li>实现MethodIntercepter接口并重写方法，在方法内部对代理对象进行功能增强。</li><li>通过Enhancer来创建代理对象。</li></ol></li></ol><p>CGLIB是通过fastClass来实现的，就是为方法建立索引，根据索引来调用方法。<br><strong>限制：</strong> CGLIB由于是通过继承来实现代理的，所以不能对final修饰的类进行代理。</p><p>在Spring的AOP中，如果类实现了接口，则使用JDK的动态代理，否则使用CGLIB。一般来说，JDK的效率更高。</p></li><li><p>对象实例化的过程？<br></p><ol><li>类的加载过程：<ol><li>加载<ul><li>加载类的二进制字节流，可以从本地字节码中获取，也可以从网络中获取</li><li>把二进制字节流加载到内存中，会在堆中生成Class对象</li></ul></li><li>连接 <br><br>   连接分成了三部分：<ol><li>验证：验证二进制字节流的正确性</li><li>准备：为静态变量分配空间，为其赋默认值，final变量会直接赋程序中指定的值</li><li>解析：把符号引用转变为直接引用</li></ol></li><li>初始化<br>   初始化会执行静态代码块和<clinit>方法，这是由JVM自动创建的。<br>   由于非静态变量属于对象，不属于类，而类加载的几个阶段都只针对类变量，所以非静态变量是不会被初始化的。<br><img src="/%E9%9D%A2%E8%AF%95/%E7%B1%BB%E5%88%9D%E5%A7%8B%E5%8C%96%E7%9A%84%E9%A1%BA%E5%BA%8F.png" alt="alt text"></li></ol></li><li>为类的对象分配内存：<br>  当类已被加载，会为类的对象分配内存，相当于在内存空间中为类的划分出一块空间，算法有指针碰撞法和空闲列表法。<ol><li>指针碰撞：<br> 需要内存空间规整的情况，即GC算法需要整理内存空间。<br> 算法过程： 指针处于已分配内存和未分配内存分界线处，向未分配内存移动，直到分配到足够多的内存即停止。</li><li>空闲列表：<br> 在虚拟机中维护一个空闲列表，用来记录堆中哪些内存是未分配的，在为对象分配内存的时候，会从列表中找到合适大小的内存块。</li></ol></li><li>初始化零值<br>  会为分配的内存初始化零值，所以新创建的对象的字段都是有默认值的。</li><li>执行对象的初始化方法</li><li>创建引用，入栈（被操作）</li></ol><p>对象如何访问到呢？</p><ol><li>使用句柄：先去句柄池中找到指向对象实例数据的指针，和指向对象类型数据的指针，再分别去找对应的类型数据。</li><li>直接指针：对象的实例数据可以直接访问到，但对象的类型数据是先找到指针，再找对应的类型数据。</li></ol></li><li><p>JVM内存模型是什么样的？<br>   JVM内存分为堆、方法区（JDK7是永久代，JKD8中变成了元空间，处于本地内存中）、线程私有区域、本地内存。<br>   <strong>线程私有区域</strong>里有虚拟机栈、本地方法栈、程序计数器。虚拟机栈里的栈帧有局部变量、操作数栈、方法返回地址、动态链接（是为了把符号引用转化为直接引用）。<br>   <strong>堆</strong>里是线程共享的，几乎所有的对象都在这里分配，并且GC管理的区域就是这里。这里在JDK7及以前，分为新生代、老年代和永久代。JDK8之后，永久代变成了元空间并且放到了本地内存中。<br>   <strong>方法区：</strong>主要存储类信息、字段信息、常量和静态变量。方法区像是接口，而JDK7的实现为永久代，JDK8实现为元空间。<br>   <strong>本地内存：</strong>就是本机内存，不是JVM划分出来的内存，<strong>直接内存</strong>就是jvm直接映射空间到本地内存，可以直接操控，在零拷贝里有应用。</p><ul><li>JDK1.7：<br><img src="/%E9%9D%A2%E8%AF%95/JVM%E5%86%85%E5%AD%98JDK7.png" alt="alt text"></li><li>JDK1.8<br><img src="/%E9%9D%A2%E8%AF%95/JVM%E5%86%85%E5%AD%98JDK8.png" alt="alt text"></li></ul></li><li><p>什么时候对象会加载？</p><ol><li>使用new创建对象实例的时候。</li><li>使用反射，如Class.forName()、newInstance()的时候。</li><li>当初始化一个类，而其有父类并且未初始化的时候，会先初始化父类。</li><li>main()方法所在的类，在JVM启动的时候会被加载、初始化。</li></ol></li><li><p>双亲委派机制？有什么优点？打破双亲委派机制？自定义类加载器？<br>双亲委派机制是jvm的一个加载类的机制。<br>首先，jvm他有三个类加载器，启动类加载器、扩展类加载器、应用程序类加载器，类加载的时候，先从应用程序类加载器开始，先判断这个类是否被该类加载器加载过，如果不是，则加载任务委派给父类加载器，父类加载器进行同样的操作，最多委派到启动类加载器，启动类加载器会尝试加载类，如果这个类不属于他加载，则返回到扩展类加载器，同样判断，最后返回到应用程序类加载器。在这期间，类要不被加载，要不最后返回错误。</p><p>优点：</p><ol><li>避免了类被重复加载</li><li>安全性</li></ol><p>怎么打破双亲委派机制？自定义类加载器？<br>自定义类加载器，去基础ClassLoader这个类，去重写loadClass方法。<br>Tomcat，他通过自定义的类加载器，实现了web应用之间的隔离。</p></li><li><p>接口和抽象类的区别</p><ol><li>一个类只能继承一个抽象类，但能实现多个接口</li><li>接口的方法都是抽象方法，而抽象类给可以给方法具体的实现。</li><li>接口是对局部行为进行抽象，而抽象类是对类整体进行抽象。</li></ol></li><li><p>JVM 调优？如何定位当前系统的瓶颈？</p><ol><li><p><strong>监控资源使用情况</strong>：</p><ul><li>检查CPU、内存、磁盘I&#x2F;O和网络I&#x2F;O的使用情况。使用工具如<code>top</code>, <code>htop</code>, <code>vmstat</code>, <code>iostat</code>等。</li></ul></li><li><p>查看<strong>运行日志</strong>，去看具体哪部分的问题。</p></li><li><p><strong>查看Java进程的线程状态</strong>：</p><ul><li>使用arthas这些工具来获取线程的堆栈跟踪，分析是否有线程处于等待状态，或者是否有死锁。</li></ul></li><li><p><strong>分析GC（垃圾回收）日志</strong>：</p><ul><li>检查GC日志文件，确定是否有频繁的GC发生，这可能是内存不足或GC配置不当的信号。</li></ul></li><li><p><strong>分析代码性能</strong>：<br>审查代码，查看是否有地方使用低效的算法。</p></li><li><p><strong>网络问题排查</strong>：</p><ul><li>如果应用需要频繁的网络通信，检查网络延迟和带宽使用情况。</li></ul></li><li><p><strong>配置优化</strong>：</p><ul><li>根据监控结果调整JVM参数，如堆大小、栈大小、GC算法等。</li></ul></li></ol></li></ol><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><ol><li>java的异常体系<br>java的异常体系最顶层是throwable类，他有两个子类，exception和error。<ul><li>error：表示的是运行时错误，而且是应用程序无法解决的错误。</li><li>exception：<ul><li>非运行时异常：在编译期间就会被发现并报错</li><li>运行时异常：是应用程序可以自己处理的异常</li></ul></li></ul></li></ol><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><ol start="6"><li>常用的集合？底层原理？<ol><li><p><strong>HashMap:</strong><br><br><strong>在JDK1.8之前，</strong>HashMap的底层是由数组加链表组成的链表散列。<br>Key在通过哈希计算并经过扰动处理后得到hash值，然后去找到数组对应的位置，判断该位置是否存在元素，如果存在，则判断是否是同一个元素，如果是，则覆盖，否则把数据存储在链表的头部。</p><p><strong>在JDK1.8之后，</strong>HashMap的底层是由数组、链表和红黑树组成的，当链表的长度超过阈值后，如果数组长度小于64，则先进行扩容，如果大于64了，则把链表转化为红黑树。</p><p>HashMap有几个构造方法，最重要的参数是负载因子和初始大小。默认的HashMap大小为16，且大小必须是2的幂次，如果传入10，则最终大小是16；而负载因子为0.75，这表示当数组只能存放 n*0.75个元素（n表示数组长度），如果超过这个大小，则会扩容。</p><p><strong>为什么大小必须是2的幂次？</strong><br>因为2的N次幂有助于减少碰撞，而且使用了速度更快的位运算（&amp;(n-1)操作）来替换了取模运算，而只有大小为2的幂次的时候，它们俩才相等。</p><p><strong>负载因子的大小有什么讲究吗？</strong><br>负载因子太小，则会导致数组浪费，而太大，则会导致过多的碰撞。</p><p><strong>HashMap是线程安全的吗？有什么问题？</strong><br><br>不是线程安全的，在JDK1.7的时候，多线程情况下，扩容会导致链表死循环和数据丢失的情况。<br>而在jdk1.8的时候，put方法会出现数据覆盖的情况。</p><p><strong>put方法：</strong></p><ol><li>首先根据 key 的值计算 hash 值，找到该元素在数组中存储的下标；</li><li>如果没有哈希冲突直接放在对应的数组下标里；</li><li>如果冲突了，且 key 已经存在，就覆盖掉 value；</li><li>如果冲突后，发现该节点是红黑树，就将这个节点挂在树上；</li><li>如果冲突后是链表，判断该链表是否大于 8 ，如果大于 8 并且数组容量小于 64，就进行扩容；如果链表节点大于 8 并且数组的容量大于 64，则将这个结构转换为红黑树；否则，链表插入键值对，若 key 存在，就覆盖掉 value。<br><img src="/%E9%9D%A2%E8%AF%95/HashMap%E7%9A%84PUT.png" alt="alt text"></li></ol><p><strong>get方法：</strong></p><ol><li>对key做hash运算，计算index</li><li>找数组中对应的位置，如果是单个元素并且key相等，则返回元素，如果为空，则返回null（getOrDefault()可以指定）</li><li>如果是链表节点，则遍历链表找到目标节点并返回</li><li>如果是树节点，则查找树节点<br><strong>扩容resize方法：</strong></li><li>在元素个数大于阈值，即数组长度✖负载因子后，进行扩容，数组长度变为原来的2倍。</li><li>准备新的数组，然后把旧的数据重新hash计算，并放到对应的位置。<br><strong>一般用什么作为HashMap的key?</strong><br>一般用Integer、String 这种不可变类当作 HashMap 的 key，String 最为常见。</li></ol><ul><li>因为字符串是不可变的，所以在它创建的时候 hashcode 就被缓存了，不需要重新计算。</li><li>因为获取对象的时候要用到 equals() 和 hashCode() 方法，那么键对象正确的重写这两个方法是非常重要的。Integer、String 这些类已经很规范的重写了 hashCode() 以及 equals() 方法</li></ul><h4 id="为什么string和integer是不可变的？什么是不可变类？"><a href="#为什么string和integer是不可变的？什么是不可变类？" class="headerlink" title="为什么string和integer是不可变的？什么是不可变类？"></a>为什么string和integer是不可变的？什么是不可变类？</h4><h4 id="hashSet是如何实现查重的？"><a href="#hashSet是如何实现查重的？" class="headerlink" title="hashSet是如何实现查重的？"></a>hashSet是如何实现查重的？</h4><p>hashSet底层调用的是HashMap的put方法，它实际上不管元素是否已经存在，都是直接覆盖的，只不过会返回一个Boolean，告诉我们之前是否存在这个值，如果是true，则存在，否则，不存在。</p><h4 id="比较-HashSet、LinkedHashSet-和-TreeSet-三者的异同"><a href="#比较-HashSet、LinkedHashSet-和-TreeSet-三者的异同" class="headerlink" title="比较 HashSet、LinkedHashSet 和 TreeSet 三者的异同"></a>比较 HashSet、LinkedHashSet 和 TreeSet 三者的异同</h4><p><a href="https://cloud.tencent.com/developer/article/2348753">https://cloud.tencent.com/developer/article/2348753</a></p></li><li><p>ArrayList与LinkedList</p><p><strong>ArrayList</strong>是能自动扩容的数组，底层是Object数组。在添加元素之前都会判断是否需要扩容。<br><strong>可以添加null吗？</strong> 可以，但不建议，容易出现空指针异常。<br><strong>扩容机制：</strong><br></p><ol><li>无参构造方法会创建一个容量为0的数组，第一次添加元素的时候，会扩容为10。</li><li>使用有参构造可以指定数组容量。</li><li>在每一次添加元素的时候，都会判断是否需要扩容，即元素数目是否已经和数组容量相同了。如果是，则扩容为1.5倍。</li></ol><h3 id="arrayList怎么实现线程安全？"><a href="#arrayList怎么实现线程安全？" class="headerlink" title="arrayList怎么实现线程安全？"></a>arrayList怎么实现线程安全？</h3><ol><li>使用synchronized，加锁</li><li>使用Collections.synchronizedList，就是在内部使用了synchronized</li><li>使用CopyOnWriteArrayList，是写时复制，在每次写操作，都会复制一次数组，所以在写操作较多的情况下，性能很差。</li></ol><p><strong>LinkedList</strong> 底层由双向链表实现。 在头尾操作节点的情况下，复杂度为O(1)，但是其他地方，复杂度为O(n)。</p><p>两者对于内存的占用，arraylist主要是末尾的数组不会被使用，浪费了，而linkedList则是prev和next指针会消耗空间。</p></li><li><p>ConcurrentHashMap<br>ConcurrentHashMap是线程安全的HashMap，它并非锁住整个方法，而是通过原子操作和局部加锁的方法保证了多线程的线程安全，且尽可能减少了性能损耗。<br><strong>JDK1.7</strong>的版本，ConcurrentHashMap是由Segment数组结构和HashEntry数组结构组成的，HashEntry存储的是键值对数据，而Segment是一个可重入锁，继承了ReentrantLock。segment是一个分段锁，每个segment里包含了一个HashEntry数组，每个HashEntry存储了一部分的hash范围的数据。每次修改数据必须得获得对应的segment锁。<br><img src="/%E9%9D%A2%E8%AF%95/ConcurrentHashMap%20JDK7.png" alt="alt text"><br><strong>JDK1.8中</strong>，ConcurrentHashMap 选择了与 HashMap 相同的数组+链表+红黑树结构，在锁的实现上，采用 CAS 操作和 synchronized 锁实现更加低粒度的锁，只需要锁住这个链表的首节点，并不会影响其他的 数组 元素的读写，大大提高了并发度。<br><img src="/%E9%9D%A2%E8%AF%95/ConcurrentHashMap%20JDK8.png" alt="alt text"><br><strong>那为什么 JDK1.8 要使用 synchronized 锁而不是其他锁呢？</strong><br><br>因为synchronized在jdk8的时候得到了极大的优化，并且有多种锁状态，会从无锁-&gt;可重入锁-&gt;轻量级锁-&gt;重量级锁根据情况逐渐升级，性能高了很多。<br><strong>put方法：</strong><br>JDK1.7:<br><br>先尝试自旋获取锁，如果自旋重试的次数超过 64 次，则改为阻塞获取锁。获取到锁后：</p><ol><li>将当前 Segment 中的 数组中 通过 key 的 hashcode 定位到 对应的HashEntry。</li><li>遍历该 HashEntry，如果不为空则判断传入的 key 和当前遍历的 key 是否相等，相等则覆盖旧的 value。</li><li>不为空则需要新建一个 HashEntry 并加入到 Segment 中，同时会先判断是否需要扩容。</li><li>释放 Segment 的锁<br>JDK1.8:<br><br>先定位到 Node，拿到首节点 first，判断是否为：</li><li>如果为 null ，通过 CAS 的方式把数据 put 进去。</li><li>如果不为 null ，并且其他线程在扩容，参与一起扩容。</li><li>如果不为 null ，并且没有其他线程在扩容，则synchronized 锁住 first 节点，判断是链表还是红黑树，遍历插入。<br><strong>为什么 ConcurrentHashMap 的 key 和 value 不能为 null？</strong><br><br>这是因为当通过 get(k) 获取对应的 value 时，如果获取到的是 null 时，无法判断，它是 put(k,v) 的时候 value 为 null，还是这个 key 从来没有添加。</li></ol><p><strong>ConcurrentHashMap和HashMap加锁有什么区别？</strong><br>8. 锁的粒度，CouncurrentHashMap的锁粒度更细，性能更好<br>9. 乐观锁，CouncurrentHashMap的锁大量使用CAS操作，而synchronized和reentrantLock是悲观锁。（synchronized会锁升级，最后会升级为重量级锁）<br>10. 安全性：CouncurrentHashMap是经过精心设计的，保证了并发安全，而使用Synchronized和reentrantLock可能会出现并发安全的问题。</p></li><li><p>LinkedHashMap<br>LinkedHashMap底层结构是数组+链表&#x2F;红黑树+双向链表，它在HashMap 基础上在各个节点之间维护一条双向链表，使得原本散列在不同 bucket 上的节点、链表、红黑树有序关联起来。<br><img src="/%E9%9D%A2%E8%AF%95/LinkedHashMap.png" alt="alt text"><br>LinkedHashMap有一个accessOrder属性，如果为true，排序模型为 访问顺序， 如果为false，则为 插入顺序。<br>插入顺序就是节点被添加的顺序，而访问顺序则是把访问到的数据放到双向队列的末尾。<br><strong>如何实现LRU缓存？</strong><br>利用LinkedHashMap，设置accessOrder为true，则排序模型为访问顺序。每次访问的节点都会被放到链表末尾，所以链表头的节点是最近最少使用的节点。</p></li><li><p>TreeMap<br>红黑树实现的Map，可以保持数据的自然顺序，或者自定义comparator排序。<br><strong>红黑树（英语：Red–black tree）是一种自平衡的二叉查找树（Binary Search Tree），结构复杂，但却有着良好的性能，完成查找、插入和删除的时间复杂度均为 log(n)。</strong></p></li><li><p>PriorityQueue<br>PriorityQueue是一个优先级队列，是一个无界队列，即队列的容量可以无限扩充。它是线程不安全的，不支持null元素。<br>它的底层是一个完全二叉树。</p></li></ol></li></ol><h2 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h2><ol start="7"><li><p>进程间通信的方式？</p><ol><li>管道（匿名管道）：它只适用于有亲缘关系的进程间通信，而且是单向的，半双工。</li><li>有名管道：也是半双工的，但是适合于任何进程间的通信。</li><li>消息队列：是消息的链表，在内核中。</li><li>共享内存：就是一个进程创建一块能被其他进程访问的内存空间。</li><li>信号量：一个计数器，常用于锁，实现进程间的同步。</li><li>套接字Socket：可以用于两个机器间的通信。</li><li>信号signal：给某个进程发送某个信号，如kill信号。</li></ol></li><li><p>线程间通信的方式</p><ol><li>volatile：用volatile修饰变量，会让线程每次都去共享空间中读取最新的变量值，保证了变量的可见性。</li><li>synchronized：给临界区加锁，只有获得锁的线程才能访问临界区资源。</li><li>ReentrantLock：与synchronized类似，只不过实现方式不同。</li><li>信号量</li><li>如果说同步方式的话，原子类是否也算？</li></ol></li><li><p>为什么需要Java内存模型？<br>由于多核CPU的多级缓存的存在，会导致多线程并发情况下，缓存不一致性的问题。又因为不同的CPU和操作系统的内存模型各不相同，Java为了屏蔽硬件和操作系统访问内存的各种差异，提出了「Java内存模型」的规范，保证了Java程序在各种平台下对内存的访问都能得到一致效果。</p></li><li><p>Java内存模型是什么？<br>是一种规范，主要分成三块:</p><ol><li>Java内存模型的抽象结构<br>每个线程都有自己的本地内存，以及一个公共的共享内存。<br><img src="/%E9%9D%A2%E8%AF%95/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B.png" alt="alt text"></li><li>happen-before规则<br>  happen-before实际上也是一套「规则」。Java内存模型定义了这套规则，目的是为了阐述「操作之间」的内存「可见性。<br>  总结起来就两条：</li></ol><ul><li>只要不影响单线程、多线程执行结果，怎么指令重排、怎么优化都可以</li><li>只要会影响执行结果，就必须禁止</li></ul><ol start="3"><li>volatile<br>  volatile通过禁止重排，可以保证有序性和可见性。</li></ol></li><li><p>并发编程的三个重要特性：</p><ol><li>原子性：一个操作或多个操作要么全部执行，要么全都不执行</li><li>可见性：一个线程对变量的修改，其他线程要立即能看到修改后的新值</li><li>有序性：不能因为指令重排导致代码的执行顺序被改变了</li></ol></li><li><p>线程池的参数？<br><strong>最重要的三个参数</strong>:</p><ol><li>corePoolSize：核心线程数目，即阻塞队列没有达到上限的时候，最多同时运行的线程数目</li><li>maximumPoolSize：在任务队列满了之后，线程池最大能同时运行的线程数目</li><li>workQueue：如果当线程数目已经到达corePoolSize，则新任务会被放入任务队列<br><strong>其他常见参数</strong>:</li><li>keepAliveTime：当线程数超过了核心线程数，非核心线程在没有任务的情况下，持续多久才被销毁</li><li>threadFactory：可以在创建新线程的时候给线程添加名字</li><li>handler：饱和策略，如果任务队列满了，并且线程数已经到达了最大线程数，线程池采取的策略。比如 抛出异常来拒绝新任务、直接抛弃、丢弃最早的未处理的任务等。</li></ol></li><li><p>线程池创建两种方式？底层原理？</p><h3 id="创建方式："><a href="#创建方式：" class="headerlink" title="创建方式："></a>创建方式：</h3><ol><li>通过Executors 创建，但是不推荐，因为它创建的任务队列都是无界或者容量为Integer.MAX_VALUE，很容易造成OOM。</li><li>通过ThreadPoolExecutor，推荐，可以指定上述的各种参数。<br><strong>线程池的最佳实践：</strong></li><li>声明线程池的时候，一定要用有界队列，避免OOM。</li><li>可以线程池的一些现成的API来监控线程池的情况，比如线程数目、任务队列长度等。</li><li>不同业务的线程池尽量分开。</li><li>CPU密集型，核心线程数N+1，I&#x2F;O密集型，2*N</li></ol><h3 id="线程池的底层原理："><a href="#线程池的底层原理：" class="headerlink" title="线程池的底层原理："></a>线程池的底层原理：</h3><ol><li>线程池可以理解为一个集合，一般使用ArrayList、HashSet、LinkedList等。</li><li>一般使用LinkedList<Thread>来作为容器。</li><li>第一次启动时，创建多个线程，保存到一个集合中。</li><li>使用线程时，就从集合中取出线程使用。<br>如：Thread t &#x3D; list.remove(0);<br>Thread t &#x3D; linked.removeFirst();</li><li>使用完线程，则把线程归还到 集合中。（集合一般是队列，先进先出）</li></ol></li><li><p>什么是公平锁，什么是非公平锁？synchronized是公平的吗？为什么？<br><strong>公平锁：</strong> 就是先尝试获取锁的线程肯定会比后尝试获取锁的线程 先获得锁，类似于FIFO。<br><strong>非公平锁：</strong> 就是不能按照先来后到的顺序获得锁。<br>synchronized的是非公平锁，因为synchronized无论处于哪个级别，比如无锁、偏向锁、轻量级锁、重量级锁，其中除了偏向锁，每个线程都是会尝试去抢占锁。</p></li><li><p>synchronized是怎么升级锁的？</p><ol><li>无锁：无锁状态，不涉及到多线程的竞争访问。</li><li>偏向锁：<br>  核心思想：共享资源被第一次访问时候，该线程的ID会被锁记录在结构中，之后该线程获取锁将直接获取，不需要任何同步操作。<br><br>  加锁的时候，可以通过CAS操作去记录线程ID，存放在锁的结构中。<br><br>  偏向锁是最乐观的锁，这样做是假设资源在大部分情况下，只有一个线程访问，很少出现并发冲突的情况。<br></li><li>轻量级锁：<br>  当出现线程并发冲突的时候，偏向锁会升级为轻量级锁。线程通过CAS操作去获取锁，如果自旋次数超过一定次数，则升级为重量级锁。</li><li>重量级锁：<br>  重量级锁依赖于操作系统底层的mutex操作，需要状态切换，消耗资源较多。</li></ol></li><li><p>ReentrantLock 是什么？<br>ReentrantLock是一个可重入且独占式的锁，和synchronized类似，但是更灵活、强大，增加了轮询、超时、中断、公平锁和非公平锁等高级功能。底层是AQS实现的。</p><h3 id="reentrantLock是如何实现公平锁和非公平锁的？"><a href="#reentrantLock是如何实现公平锁和非公平锁的？" class="headerlink" title="reentrantLock是如何实现公平锁和非公平锁的？"></a>reentrantLock是如何实现公平锁和非公平锁的？</h3><ol><li>先解释公平锁和非公平锁。</li><li>reentrantLock默认是非公平锁。对于公平锁的实现，reentrantLock内部是用一个双向队列实现的，新来的线程，会进入队列，在队列末尾等待前一个节点释放锁。而非公平锁，会在一开始尝试去竞争锁，如果失败，会和公平锁一样，放到队列末尾。</li><li>非公平锁的性能比公平锁要高，因为公平锁中，线程在获取不到锁的情况下，会进入休眠状态，当他成为首节点后，又会从休眠态切换到运行态，而状态的切换需要内核状态的切换。这就导致性能较低。<br>  而非公平锁，在线程最开始尝试竞争锁的时候，可能直接获得锁，这就避免了两次内核切换，从而导致性能的提升。</li></ol></li><li><p>synchronized 和 ReentrantLock 有什么区别？</p><ol><li>两者都是可重入锁：可重入锁是一个线程持有一个锁的情况下，可以在没有释放锁的情况下再次获取该锁。</li><li>synchronized依赖于JVM，而ReentrantLock是依赖于JDK。</li><li>ReentrantLock 比 synchronized 增加了一些高级功能</li><li>等待可中断：ReentrantLock可以在获取锁的时候，选择放弃等待。而synchronized不行</li><li>ReentrantLock可以指定是公平锁还是非公平锁。而synchronized只能是非公平锁。</li></ol></li><li><p>ThreadLocal是什么？可以用来做什么？底层是什么？（<strong>需要更详细点</strong>）<br><strong>是什么：</strong> 使用ThreadLocal可以为变量在每个线程中都创建副本，这样就能隔绝其他线程的干扰。<br><strong>用来做什么：</strong> 1. 用来做线程间数据隔离 2. Session会话管理，如果一个连接用一个线程，则可以用ThreadLocal来保存session。<br><strong>底层是什么：</strong> </p><ol><li>每个thread内部有一个Map，ThreadLocalMap</li><li>Map里面存储的key是ThreadLocal实例对象，value是变量的副本</li><li>Thread内部的Map是由ThreadLocal来维护的，通过ThreadLocal负责获取和设置线程中ThreadLocalMap的变量值</li><li>对于不同的线程，只能获取到它自己的ThreadLocalMap中的value值，这样就隔离了不同线程<br><img src="/%E9%9D%A2%E8%AF%95/threadlocal.png" alt="alt text"></li></ol><h4 id="ThreadLocal的set方法："><a href="#ThreadLocal的set方法：" class="headerlink" title="ThreadLocal的set方法："></a>ThreadLocal的set方法：</h4><ol start="5"><li>获取当前线程，并从当前线程中获取ThreadLocals属性，ThreadLocals就是ThreadLocalMap</li><li>判断ThreadLocalMap是否为null</li><li>如果非null，则在map中新增key-value</li><li>否则创建map，同时新增key-value (thread.threadLocals&#x3D;new ThreadLocalMap(this, firstValue))， 这里的this指的是调用方法的ThreadLocal</li></ol><h4 id="ThreadLocal的get方法："><a href="#ThreadLocal的get方法：" class="headerlink" title="ThreadLocal的get方法："></a>ThreadLocal的get方法：</h4><ol start="9"><li>获取当前线程，并从当前线程中获取ThreadLocals属性，ThreadLocals就是ThreadLocalMap</li><li>如果map不为null，以当前的threadLocal为key，获取副本变量entry</li><li>如果变量entry不为空，则强转其value为需要的类型，并返回</li><li>如果map不存在，或者map存在，但threadLocal对应的entry为null，则调用setInitialValue()。setInitialValue()方法主要就是为key-value的value赋初值，同时判断Map是否存在，如果不存在则创建。<br><strong>总结：</strong> 先获取当前线程的ThreadLocalMap变量，如果存在则返回值，不存在则创建并返回初始值。</li></ol><h4 id="ThreadLocal的remove方法："><a href="#ThreadLocal的remove方法：" class="headerlink" title="ThreadLocal的remove方法："></a>ThreadLocal的remove方法：</h4><ol start="13"><li>获取当前线程，并从当前线程中获取ThreadLocals属性，ThreadLocals就是ThreadLocalMap</li><li>如果map不为null，则以调用remove方法的ThreadLocal为key删除对应的实体entry</li></ol><p><strong>ThreadLocalMap中的key是强引用会导致什么问题？</strong><br>15. 当在业务代码中使用完ThreadLocal，ThreadLocal Ref被回收了<br>16. 但是由于在ThreadLocalMap中的entry强引用了threadLocal，则造成了threadLocal无法被回收。<br>17. 如果没有手动调用remove方法，并且线程还在运行，则引用链current thread ref-&gt; current thread-&gt; map-&gt; entry会导致entry无法被回收，从而导致内部的<strong>key和value</strong>无法回收，出现内存泄漏的情况。<br><img src="/%E9%9D%A2%E8%AF%95/ThreadLocal%E5%BC%BA%E5%BC%95%E7%94%A8.png" alt="alt text"></p><p><strong>ThreadLocalMap中的key是弱引用会怎么样？</strong><br>18. 当在业务代码中使用完ThreadLocal，ThreadLocal Ref被回收了<br>19. 由于entry是弱引用指向threadlocal，所以threadlocal会被回收，key此时值为null<br>20. 如果没有手动调用remove方法，并且线程还在运行，则引用链current thread ref-&gt; current thread-&gt; map-&gt; entry会导致entry无法被回收，从而导致内部的<strong>value</strong>无法回收，出现内存泄漏的情况。<br><img src="/%E9%9D%A2%E8%AF%95/ThreadLocal%E5%BC%B1%E5%BC%95%E7%94%A8.png" alt="alt text"></p><p><strong>出现内存泄漏的真实原因：</strong><br>无论是强引用还是弱引用都会出现内存泄漏的问题。</p><h4 id="出现内存泄漏的前提："><a href="#出现内存泄漏的前提：" class="headerlink" title="出现内存泄漏的前提："></a>出现内存泄漏的前提：</h4><ol start="21"><li>没有手动删除entry</li><li>currentThread依然运行<br>所以根本原因是threadLocalMap的生命周期和current thread一样长，如果没有手动删除对应的key就会导致内存泄漏。</li></ol><p><strong>那为什么要用弱引用？</strong><br>要避免内存泄漏有以下两种方法：<br>23. 使用完threadLocal，调用其remove()方法<br>24. 使用完threadLocal，线程随之结束<br>相较于第一种方法，第二种更不好控制，例如在线程池的情况下，核心线程是不会销毁的。</p><p>也就是说，只要及时调用**remove()**方法，无论key是强引用还是弱引用都不会有问题，那为什么要用弱引用呢？</p><p>事实上，threadLocalMap的get&#x2F;set方法，会对key为null进行判断，如果为null，那么会把value置为null。</p><p>这样就多了一层保障，即使忘记调用remove()，<strong>弱引用</strong>的threadLocal会被回收，而value会在下次map调用get&#x2F;set方法的时候被置为null，避免了内存泄漏。</p><p><strong>ThreadLocal如何解决hash冲突的？</strong><br>ThreadLocal使用的线性探测法来解决hash冲突，流程如下：<br>25. 先根据key来计算索引i，然后查找位置i上的entry<br>26. 若是entry已经存在并且key等于传入的key，那么覆盖旧值<br>27. 若是遇到key为null，则替换这个空的entry<br>28. 不断向后探测，直到遍历索引i后面所有的节点直至遇到null，如果一直没有找到合适的位置，则在末尾新建一个entry，并把size+1 (哈希表是一个循环数组)<br>29. 如果size到达阈值，则进行扩容和rehash</p><p><strong>threadLocal为什么一般设置为static？</strong><br>避免重复创建TSO（Thread Specific Object，即ThreadLocal所关联的对象）所导致的浪费。  </p><p>设置为static可以让多个线程共享这个ThreadLocal变量，同时由于ThreadLocal的作用，多个线程之间又能互相隔离，这样减少了每个线程单独创建ThreadLocal的消耗。否则，每次创建一个对应的类实例，ThreadLocal就会被创建一次。</p></li><li><p>AQS是什么？</p><ol><li>首先，了解CLH锁：<br><a href="https://mp.weixin.qq.com/s/jEx-4XhNGOFdCo4Nou5tqg">https://mp.weixin.qq.com/s/jEx-4XhNGOFdCo4Nou5tqg</a></li></ol><p>AQO是在CLH锁的基础上进行了改进得到的。</p></li><li><p>future是什么？你对它的理解<br><strong>future介绍：</strong><br>当我们执行某一耗时的任务时，可以将这个耗时任务交给一个子线程去异步执行，同时我们可以干点其他事情，不用傻傻等待耗时任务执行完成。等我们的事情干完后，我们再通过 Future 类获取到耗时任务的执行结果。这样，程序的执行效率就显著提高了。</p><p>这其实就是多线程中经典的 Future 模式，你可以将其看作是一种<strong>设计模式</strong>，<strong>核心思想</strong>是异步调用，主要用在多线程领域，并非 Java 语言独有。<br>future有五个方法：</p><ol><li>boolean cancel(boolean mayInterruptIfRunning)：尝试取消执行任务。</li><li>boolean isCancelled()：判断任务是否被取消。</li><li>boolean isDone()：判断任务是否已经被执行完成。</li><li>get()：等待任务执行完成并获取运算结果。</li><li>get(long timeout, TimeUnit unit)：多了一个超时时间。<br><strong>future有些缺陷：</strong></li></ol></li><li><p>countdownLatch是什么？<br>它是一个同步工具类，通过一个计数器来实现，初始值为线程的数量，当一个线程完成了它的任务，就会让计数器减一，当计数器的值为0，则说明所有线程任务都已完成，这样等待的线程就可以继续往下执行。<br><strong>有两个应用场景：</strong></p><ol><li>某个线程需要等待多个线程都完成某一任务</li><li>需要多个线程同时执行某个任务，通过处理速度<br><strong>项目中CountDownLatch的使用方法：</strong></li></ol><h4 id="第一种：CountDownLatch配合线程池："><a href="#第一种：CountDownLatch配合线程池：" class="headerlink" title="第一种：CountDownLatch配合线程池："></a>第一种：CountDownLatch配合线程池：</h4><ol start="3"><li>在一次HBase的查询中，把生成的get的list列表，依据指定的列表长度，拆分成多个小列表，然后交给线程池进行查询。</li><li>此时，由于当前线程需要等到所有查询线程返回结果后，才能进一步处理。所以，在最开始new一个CountDownLatch对象，其值为get拆分成的小list的个数，并调用CountDownLatch.await()，当然要指定超时时间。</li><li>而每个查询线程在执行完任务，或者出现异常的时候，都会将CountDownLatch的值减一，直到CountDownLatch的值为0，此时主线程结束等待，执行接下来的任务。</li></ol><h4 id="第二种：CountDownLatch配合future、线程池："><a href="#第二种：CountDownLatch配合future、线程池：" class="headerlink" title="第二种：CountDownLatch配合future、线程池："></a>第二种：CountDownLatch配合future、线程池：</h4><ol start="6"><li>事先new一个Map，key为特定的值，比如如果要查询当前数据和上周数据，key会是current和lastWeek，value为future。然后在线程池中提交任务的时候，在map中保存每一个返回的future，</li><li>主线程会调用CountDownLatch.await()，设置超时时间。之后，会遍历这个Map，调用future的isDone()方法，判断是否完成任务，是，就调用future.get()方法得到结果，并放入返回的结果中，否则，在返回结果中放入一个空值。</li></ol></li></ol><h2 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h2><ol><li><p>什么是垃圾回收？什么时候会触发垃圾回收？<br>垃圾回收是Java虚拟机的一种机制，它会自动地回收那些不被使用的对象，释放空间，不像c++那样需要手动释放内存。</p><p>触发垃圾回收需要首先了解jvm的内存结构，几乎所有的对象都存在堆中，而jvm把堆分成了新生代、老年代和永久代（JDK7及之前），新生代又被分为Eden区和survivor区，survivor区又被分为s1和s0。<br><strong>什么时候触发垃圾回收？</strong><br><br>垃圾回收分为minor gc和full gc。</p><p>新对象被创建的时候都会被分配到Eden区，如果Eden区空间满了，则会触发一次minor GC，它会尝试把Eden区中的对象转移到s0或s1，与此同时，如果s0被标记为from，那它会把eden区的对象和s0的对象都转移到s1中，并且对象的年龄均加一，然后标记s1为from，并把s0清空。如果有对象年龄超过了阈值，则会把它转移到老年代中。此时，它会通过分配担保机制把新生代的对象转移到老年代中。</p><p><strong>分配担保机制：</strong><br><br>在minor GC之前，虚拟机会检查老年代的可用空间是否大于新生代所有对象的空间之和。<br>如果大于，则是安全的<br>否则，看虚拟机的参数是否设置了允许担保失败，如果是，则查看老年代的空间是否大于历次晋升到老年代的空间的平均大小，如果是，虽然不安全，但会尝试minor gc，否则进行full gc。</p><p><strong>minor gc和full gc的差别？</strong><br></p><ol><li>minor gc作用于新生代，比较频繁，回收速度也比较快。</li><li>full gc作用于老年代，一般full gc会伴随一次minor gc。full gc的速度一般比minor gc慢10倍。</li></ol><p><strong>什么时候触发full gc？</strong><br></p><ol><li>在minor gc的时候，老年代没有足够的空间分配给新生代晋升的对象</li><li>堆中产生大对象，会直接进入老年代，但此时老年代如果空间不够，则会触发full gc</li><li>调用System.gc，建议系统使用full gc，但不一定执行</li></ol></li><li><p>怎么判断哪些对象要被回收？</p><ol><li><p>引用计数法<br>对象每增加一个引用，则计数+1，每次有一个引用失效，则计数-1，如果计数为0，则会被回收<br>缺点： 无法很好地解决循环引用的问题</p></li><li><p>可达性分析法<br>从GC roots出发，如果无法找到一条路径到对象，则该对象会被回收。</p><p>GC roots一般是活跃的引用，比如虚拟机栈中栈帧的局部变量、静态变量等。</p></li></ol><p><strong>引用的类型？</strong></p><ol><li>强引用：当内存空间不足，Java虚拟机宁愿抛出OutOfMemoryError错误，使程序异常终止，也不回收这种对象。</li><li>软引用：对于软引用关联着的对象，只有在内存不足的时候JVM才会回收该对象。</li><li>弱引用：被软引用关联的对象只有在内存不足时才会被回收，而被弱引用关联的对象在JVM进行垃圾回收时总会被回收。</li><li>虚引用：它并不影响对象的生命周期，在任何时候都可能被垃圾回收器回收。</li></ol></li><li><p>回收算法有哪些？</p><ol><li>标记-清除算法：先标记出所有不需要回收的对象，然后再删除没有被标记的对象。<br><strong>问题：</strong> 大量的内存碎片</li><li>标记-复制算法：把空间分成两半，一半使用，一半备用。把存活的对象复制到另一半空间，然后当前的空间释放。<br><strong>问题：</strong> 浪费空间，并且复制大对象性能较差。</li><li>标记-整理算法：把所有被标记的对象都往一端移动，剩下的空间被释放。<br><strong>问题：</strong> 多了整理这一步，性能较差，但适合老年代这些不常整理的空间。</li></ol><p>由于各个方法都有缺陷，所以使用了分代收集算法。</p></li><li><p>垃圾回收器有哪些？</p><ol><li><p>serial收集器：新生代使用标记-复制，老年代使用标记-整理。最大的特点就是单线程，无论是新生代的回收还是老年代的回收，都是单线程，而且要停止用户线程。</p></li><li><p>parNew收集器：与serai类似，只是在新生代回收这里是多线程回收，而且暂停用户线程。</p></li><li><p>parallel scavenge收集器：与parNew几乎一样，但是在老年代回收是多线程的。</p></li><li><p>serial Old收集器：作为serial收集器的老年代版本</p></li><li><p>parallel old：parallel scavenge的老年代版本。</p></li><li><p>CMS收集器：它关注于让用户线程的停顿最短，最注重用户体验。是HotSpot虚拟机真正意义上第一款并发收集器，它第一次实现了让<strong>垃圾收集线程</strong>与<strong>用户线程</strong>（基本上）同时工作。<br>使用的是<strong>标记-清除</strong>算法，整体分为四个步骤：</p><ol><li>初始标记：暂停所有的其他线程，并记录下直接与 root 相连的对象，速度很快 ；</li><li>并发标记：同时开启 GC 和用户线程，记录可达对象；</li><li>重新标记：重新标记阶段就是为了修正并发标记期间因为用户程序继续运行而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间一般会比初始标记阶段的时间稍长，远远比并发标记阶段时间短。<strong>此时用户线程会暂停。</strong></li><li>并发清除： 开启用户线程，同时 GC 线程开始对未标记的区域做清扫。<br>缺点：因为使用标记-清除，会导致大量的内存碎片。而且有些垃圾会无法清理。</li></ol></li><li><p>G1收集器：是一款面向服务器的垃圾收集器<br>优点：</p><ol><li>并行与并发：实现了垃圾回收线程和用户线程的并行</li><li>空间整合：从整体上看是 标记-整理 算法，从局部看是 标记-复制算法。</li><li>可以预测的停顿：用户可以建立一个可以预测的时间停顿模型。<br>步骤：</li><li>初始标记</li><li>并发标记</li><li>最终标记</li><li>筛选回收<br><img src="/%E9%9D%A2%E8%AF%95/G1%E6%B5%81%E7%A8%8B.png" alt="alt text"></li></ol><p>G1 收集器在后台维护了一个优先列表，每次根据允许的收集时间，优先选择回收价值最大的 Region(这也就是它的名字 Garbage-First 的由来) 。这种使用 Region 划分内存空间以及有优先级的区域回收方式，保证了 G1 收集器在有限时间内可以尽可能高的收集效率（把内存化整为零）。</p></li></ol></li></ol><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><ol><li>设计模式六大原则<ol><li>开闭原则<br>对扩展开放，对修改关闭。</li><li>里氏代换原则<br>任何父类可以出现的地方，子类一定可以出现。也就是说父类有的功能，子类要有，父类没有的功能，子类可以扩展。</li><li>依赖倒转原则<br>实现的细节依赖于抽象，有点像面向接口编程，在顶层设计好之后，再去设计细节的代码结构。</li><li>接口隔离原则<br>使用多个隔离的接口，要优于一个综合的接口。能降低耦合度。</li><li>最少知道原则<br>一个实体应当尽量少的与其他实体之间发生相互作用，使得模块之间互相独立。</li><li>合成复用原则<br>应当尽量使用合成&#x2F;聚合的方式达到复用的目的，而非继承。<br><strong>合成：</strong>表示整体和部分的关系，整体和部分不能分开。多个对象组合在一起成为一个整体，而分开则不能存在。也就是说，整体消亡，部分也消亡。<br><strong>聚合：</strong>就像一辆车，轮胎可以分开单独存在，也就是说整体和部分可以分开。部分不随着整体的消亡而消亡。</li></ol></li><li>设计模式：<h3 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h3><ol><li>工厂模式：就是写一个工厂类，它来负责具体的类的实例化，传入类的类型，然后返回该类的实例对象。<br>优点：<ol><li>主要是解耦了，不需要自己new对象，而是通过调用同一个方法来生成不同的对象 </li><li>可以只写一个工厂类，来实现很多类的实例化，减少代码量<br>缺点：如果要扩展程序，比如需要更多的类，则需要修改工厂类，新增if-else代码，违反开闭原则了。</li></ol></li><li>抽象工厂模式： 有一个抽象的超级工厂类，它将产品分组，每一组有一个对应的工厂类。<br>优点：<ol><li>这样写符合开闭原则。</li><li>让系统的整体结构更加清晰<br>缺点：<br>   如果要改动，新增类工厂，则很麻烦。</li></ol></li><li>单例模式<br>预加载和懒加载两种</li><li>建造者模式（构建者模式）<br>实现一个抽象的builder、具体的builder，以及一个director，director调用具体的创建者，去创建产品product，而具体创建者builder实现抽象创建者builder的方法。</li><li>原型模式<br>原型模式（Prototype Pattern）是用于创建重复的对象，同时又能保证性能。<br>具体来说，就是通过拷贝原来的对象，生成一个新的对象。</li></ol><h3 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h3><ol><li>适配器模式：通俗来讲，就是通过一个类 转换 两个不兼容的接口，这样隐藏了复杂的转换细节。</li><li>装饰器模式：装饰器模式（Decorator Pattern）允许向一个现有的对象添加新的功能，同时又不改变其结构。</li><li>代理模式：创建一个类，去代理另一个类，主要是为了控制被代理类的行为。<br><strong>代理模式与装饰器模式的区别：</strong><br>装饰器模式强调的是增强，是 在被装饰者的基础上拓展功能，容易扩展，而代理模式，则是强调控制被代理者，不容易扩展。</li></ol><h3 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h3><ol><li>观察者模式<br>定义对象间的一种 一对多 的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。</li><li>责任链模式<br>把多个接收者组织成一条链，对于每一个请求，沿着这条链传递，直到遇到第一个可以处理该请求的接收者。<br>好处：可以把发送者、请求者之间有效地解耦。</li></ol></li></ol><h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><ol><li><p>JDK序列化的底层原理<br>JDK自带的序列化方式，需要实现Serializable接口，这个接口没有定义任何方法和属性，只起到<strong>标识</strong>作用，表示这个类是可以被序列化的。<br>JDK的序列化方式主要通过输出流java.io.ObjectOutputStream和对象输入流java.io.ObjectInputStream来实现。</p><h4 id="具体过程："><a href="#具体过程：" class="headerlink" title="具体过程："></a>具体过程：</h4><p><strong>序列化：</strong> 当调用ObjectOutputStream的writeObject()时，JVM 会检查被序列化的对象是否实现了 Serializable 接口。如果没有实现，则抛出NotSerializableException异常。如果实现了 Serializable 接口，则 JVM 会通过反射机制获取对象的类结构，并将其转换为字节流。<br><strong>反序列化：</strong> 当调用ObjectInputStream的readObject()方法时，JVM 会读取字节流并还原成 Java 对象。在此过程中，JVM 会使用反射机制创建对象，并通过反射设置对象的属性值。</p><p><strong>静态变量会被序列化吗？</strong><br>序列化是针对对象的，而非针对类，而静态变量属于类，所以不会被序列化。<br><strong>怎么指定字段不要被序列化？</strong><br>用transient关键字修饰字段，序列化的时候会自动忽略。<br><strong>父类会被序列化吗？</strong><br>如果B类继承了A类，序列化B类的时候会序列化A类（前提是A类也实现了Serializable接口）。</p><p>不被序列化的属性，在反序列化的时候会被赋值为null。</p><p><strong>SerialVersionUID有什么作用？</strong><br>Java的序列化机制是通过判断类的serialVersionUID来验证版本一致性的。</p><p>在进行反序列化时，JVM会把传来的字节流中的serialVersionUID与本地相应实体类的serialVersionUID进行比较，如果相同就认为是一致的，可以进行反序列化，否则就会出现序列化版本不一致的异常，即是InvalidCastException。</p><p><strong>当要反序列化的类被修改了，JVM在反序列化的时候发现serialVersionUID被改变了，报错了，那该怎么办？</strong><br>如果没有手动指定serialVersionUID，那在修改类的字段和方法的时候，jvm会自动改变serialVersionUID。<br>所以，我们指定serialVersionUID为一个固定值，那么修改了字段和方法的时候，serialVersionUID不会变化，在反序列化的时候也就不会报错了。</p><p><strong>Externalizable接口知道吗？</strong><br>Serializable 接口内部序列化是 JVM 自动实现的，如果我们想自定义序列化过程，就可以使用Externalizable接口。</p></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>面试多线程题</title>
    <link href="/2024/09/06/multithread/"/>
    <url>/2024/09/06/multithread/</url>
    
    <content type="html"><![CDATA[<h1 id="多线程打印奇偶数"><a href="#多线程打印奇偶数" class="headerlink" title="多线程打印奇偶数"></a>多线程打印奇偶数</h1><h2 id="Sychronized写法"><a href="#Sychronized写法" class="headerlink" title="Sychronized写法"></a>Sychronized写法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrintOddEven</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">MAX_COUNT</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Object</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(<span class="hljs-type">int</span> isOdd)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; MAX_COUNT; i++) &#123;<br>            <span class="hljs-keyword">synchronized</span> (lock) &#123;<br>                <span class="hljs-keyword">while</span> (num % <span class="hljs-number">2</span> != isOdd) &#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        lock.wait();<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        e.printStackTrace();<br>                    &#125;<br>                &#125;<br><br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;: &quot;</span> + num);<br>                num++;<br>                lock.notify();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">threadA</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                print(<span class="hljs-number">0</span>);<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;Thread-a&quot;</span>);<br><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">threadB</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                print(<span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;Thread-b&quot;</span>);<br><br>        threadA.start();<br>        threadB.start();<br><br>        threadA.join();<br>        threadB.join();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ReentrantLock写法"><a href="#ReentrantLock写法" class="headerlink" title="ReentrantLock写法"></a>ReentrantLock写法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrintOddEvenReentrant</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">MAX_COUNT</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Condition</span> <span class="hljs-variable">odd</span> <span class="hljs-operator">=</span> lock.newCondition();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Condition</span> <span class="hljs-variable">even</span> <span class="hljs-operator">=</span> lock.newCondition();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printOdd</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; MAX_COUNT; i++) &#123;<br>            lock.lock();<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">while</span> (num % <span class="hljs-number">2</span> != <span class="hljs-number">1</span>) &#123;<br>                    odd.await();<br>                &#125;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;: &quot;</span> + num);<br>                num++;<br>                even.signal();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                lock.unlock();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printEven</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; MAX_COUNT; i++) &#123;<br>            lock.lock();<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">while</span> (num % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>) &#123;<br>                    even.await();<br>                &#125;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;: &quot;</span> + num);<br>                num++;<br>                odd.signal();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                lock.unlock();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">threadA</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                printOdd();<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;Thread-a&quot;</span>);<br><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">threadB</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                printEven();<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;Thread-b&quot;</span>);<br><br>        threadA.start();<br>        threadB.start();<br><br>        threadA.join();<br>        threadB.join();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CAS中的ABA问题</title>
    <link href="/2024/09/06/ABA/"/>
    <url>/2024/09/06/ABA/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是ABA问题"><a href="#什么是ABA问题" class="headerlink" title="什么是ABA问题"></a>什么是ABA问题</h1><p>ABA就是有两个线程共享一个变量value，A线程读取到的时候这个值为1，准备修改的时候值还是1，但是可能这过程中B线程修改了变量1-&gt;2-&gt;1，仅仅用CAS无法得知这种修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.atomic.AtomicInteger;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ABAProblemExample</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">AtomicInteger</span> <span class="hljs-variable">atomicValue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInteger</span>(<span class="hljs-number">1</span>);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">threadA</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">expectedValue</span> <span class="hljs-operator">=</span> atomicValue.get();<br>            System.out.println(<span class="hljs-string">&quot;Thread-A reads value: &quot;</span> + expectedValue);<br><br>            <span class="hljs-comment">// 模拟线程 B 修改了值</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>); <span class="hljs-comment">// 休眠让线程 B 先执行</span><br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br><br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">isSuccess</span> <span class="hljs-operator">=</span> atomicValue.compareAndSet(expectedValue, <span class="hljs-number">2</span>);<br>            System.out.println(<span class="hljs-string">&quot;Thread-A CAS result: &quot;</span> + isSuccess + <span class="hljs-string">&quot;, new value: &quot;</span> + atomicValue.get());<br>        &#125;);<br><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">threadB</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">500</span>); <span class="hljs-comment">// 确保 Thread-A 先读取到值</span><br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br><br>            <span class="hljs-comment">// 模拟 ABA 问题，先把值改成 B 然后再改回 A</span><br>            atomicValue.compareAndSet(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>); <span class="hljs-comment">// A -&gt; B</span><br>            System.out.println(<span class="hljs-string">&quot;Thread-B changes value to: &quot;</span> + atomicValue.get());<br><br>            atomicValue.compareAndSet(<span class="hljs-number">3</span>, <span class="hljs-number">1</span>); <span class="hljs-comment">// B -&gt; A</span><br>            System.out.println(<span class="hljs-string">&quot;Thread-B changes value back to: &quot;</span> + atomicValue.get());<br>        &#125;);<br><br>        threadA.start();<br>        threadB.start();<br><br>        threadA.join();<br>        threadB.join();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面这个程序会输出</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-keyword">Thread</span><span class="hljs-params">-A</span> reads value: <span class="hljs-number">1</span><br><span class="hljs-keyword">Thread</span><span class="hljs-params">-B</span> changes value <span class="hljs-keyword">to</span>: <span class="hljs-number">3</span><br><span class="hljs-keyword">Thread</span><span class="hljs-params">-B</span> changes value back <span class="hljs-keyword">to</span>: <span class="hljs-number">1</span><br><span class="hljs-keyword">Thread</span><span class="hljs-params">-A</span> CAS result: <span class="hljs-literal">true</span>, <span class="hljs-literal">new</span> value: <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h1 id="使用AtomicStampedReference解决"><a href="#使用AtomicStampedReference解决" class="headerlink" title="使用AtomicStampedReference解决"></a>使用AtomicStampedReference解决</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.atomic.AtomicStampedReference;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ABAProblemSolution</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> AtomicStampedReference&lt;Integer&gt; atomicStampedRef = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicStampedReference</span>&lt;&gt;(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">threadA</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-type">int</span>[] stampHolder = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">1</span>];<br>            <span class="hljs-type">Integer</span> <span class="hljs-variable">expectedValue</span> <span class="hljs-operator">=</span> atomicStampedRef.get(stampHolder);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">currentStamp</span> <span class="hljs-operator">=</span> stampHolder[<span class="hljs-number">0</span>];<br>            System.out.println(<span class="hljs-string">&quot;Thread-A reads value: &quot;</span> + expectedValue + <span class="hljs-string">&quot; with stamp: &quot;</span> + currentStamp);<br><br>            <span class="hljs-comment">// 模拟线程 B 修改了值</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>); <span class="hljs-comment">// 休眠让线程 B 先执行</span><br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br><br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">isSuccess</span> <span class="hljs-operator">=</span> atomicStampedRef.compareAndSet(expectedValue, <span class="hljs-number">2</span>, currentStamp, currentStamp + <span class="hljs-number">1</span>);<br>            System.out.println(<span class="hljs-string">&quot;Thread-A CAS result: &quot;</span> + isSuccess + <span class="hljs-string">&quot;, new value: &quot;</span> + atomicStampedRef.getReference() + <span class="hljs-string">&quot; with stamp: &quot;</span> + atomicStampedRef.getStamp());<br>        &#125;);<br><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">threadB</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">500</span>); <span class="hljs-comment">// 确保 Thread-A 先读取到值</span><br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br><br>            <span class="hljs-comment">// 模拟 ABA 问题，先把值改成 B 然后再改回 A</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">currentStamp</span> <span class="hljs-operator">=</span> atomicStampedRef.getStamp();<br>            atomicStampedRef.compareAndSet(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, currentStamp, currentStamp + <span class="hljs-number">1</span>); <span class="hljs-comment">// A -&gt; B</span><br>            System.out.println(<span class="hljs-string">&quot;Thread-B changes value to: &quot;</span> + atomicStampedRef.getReference() + <span class="hljs-string">&quot; with stamp: &quot;</span> + atomicStampedRef.getStamp());<br><br>            atomicStampedRef.compareAndSet(<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, atomicStampedRef.getStamp(), atomicStampedRef.getStamp() + <span class="hljs-number">1</span>); <span class="hljs-comment">// B -&gt; A</span><br>            System.out.println(<span class="hljs-string">&quot;Thread-B changes value back to: &quot;</span> + atomicStampedRef.getReference() + <span class="hljs-string">&quot; with stamp: &quot;</span> + atomicStampedRef.getStamp());<br>        &#125;);<br><br>        threadA.start();<br>        threadB.start();<br><br>        threadA.join();<br>        threadB.join();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的程序会输出</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-keyword">Thread</span><span class="hljs-params">-A</span> reads value: <span class="hljs-number">1</span> <span class="hljs-keyword">with</span> stamp: <span class="hljs-number">0</span><br><span class="hljs-keyword">Thread</span><span class="hljs-params">-B</span> changes value <span class="hljs-keyword">to</span>: <span class="hljs-number">3</span> <span class="hljs-keyword">with</span> stamp: <span class="hljs-number">1</span><br><span class="hljs-keyword">Thread</span><span class="hljs-params">-B</span> changes value back <span class="hljs-keyword">to</span>: <span class="hljs-number">1</span> <span class="hljs-keyword">with</span> stamp: <span class="hljs-number">2</span><br><span class="hljs-keyword">Thread</span><span class="hljs-params">-A</span> CAS result: <span class="hljs-literal">false</span>, <span class="hljs-literal">new</span> value: <span class="hljs-number">1</span> <span class="hljs-keyword">with</span> stamp: <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>原因是AtomicStampedReference的CAS操作需要比较版本号，如果期待的版本号不等，则CAS失败</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">compareAndSet</span><span class="hljs-params">(V   expectedReference,</span><br><span class="hljs-params">                                 V   newReference,</span><br><span class="hljs-params">                                 <span class="hljs-type">int</span> expectedStamp,</span><br><span class="hljs-params">                                 <span class="hljs-type">int</span> newStamp)</span> &#123;<br>    Pair&lt;V&gt; current = pair;<br>    <span class="hljs-keyword">return</span><br>        expectedReference == current.reference &amp;&amp;<br>        expectedStamp == current.stamp &amp;&amp;<br>        ((newReference == current.reference &amp;&amp;<br>            newStamp == current.stamp) ||<br>            casPair(current, Pair.of(newReference, newStamp)));<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ReentrantLock可中断等特性的例子</title>
    <link href="/2024/09/05/reentrantlock/"/>
    <url>/2024/09/05/reentrantlock/</url>
    
    <content type="html"><![CDATA[<h1 id="可中断性"><a href="#可中断性" class="headerlink" title="可中断性"></a>可中断性</h1><p>下面这个例子，A先获取锁，然后持有锁睡眠5秒，B尝试获取锁的过程中被中断。于是程序输出</p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cos">Thread-A acquired the <span class="hljs-keyword">lock</span>.<br>Thread-B was interrupted <span class="hljs-keyword">while</span> waiting <span class="hljs-keyword">for</span> the <span class="hljs-keyword">lock</span>.<br>Thread-A released the <span class="hljs-keyword">lock</span>.<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReentrantLockExample</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doWork</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 尝试获取锁，并支持中断</span><br>            lock.lockInterruptibly();<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; acquired the lock.&quot;</span>);<br><br>            <span class="hljs-comment">// 模拟一些工作</span><br>            Thread.sleep(<span class="hljs-number">5000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; was interrupted while waiting for the lock.&quot;</span>);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (lock.isHeldByCurrentThread()) &#123;<br>                lock.unlock();<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; released the lock.&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ReentrantLockExample</span> <span class="hljs-variable">example</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLockExample</span>();<br><br>        <span class="hljs-comment">// 创建一个线程 A</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">threadA</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; example.doWork1(), <span class="hljs-string">&quot;Thread-A&quot;</span>);<br>        <span class="hljs-comment">// 创建一个线程 B，会在短暂等待后中断</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">threadB</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                example.doWork1();<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;Thread-B&quot;</span>);<br><br>        threadA.start();<br>        threadB.start();<br><br>        <span class="hljs-comment">// 主线程等待 1 秒钟，然后中断 B 线程</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>            threadB.interrupt();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果是用synchronized锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doWork2</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; acquired the lock.&quot;</span>);<br>        Thread.sleep(<span class="hljs-number">5000</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; was interrupted while waiting for the lock.&quot;</span>);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; released the lock.&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>则会输出</p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cos">Thread-A acquired the <span class="hljs-keyword">lock</span>.<br>Thread-A released the <span class="hljs-keyword">lock</span>.<br>Thread-B acquired the <span class="hljs-keyword">lock</span>.<br>Thread-B was interrupted <span class="hljs-keyword">while</span> waiting <span class="hljs-keyword">for</span> the <span class="hljs-keyword">lock</span>.<br>Thread-B released the <span class="hljs-keyword">lock</span>.<br></code></pre></td></tr></table></figure><h1 id="超时"><a href="#超时" class="headerlink" title="超时"></a>超时</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doWork3</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 尝试获取锁，等待最多 2 秒</span><br>        <span class="hljs-keyword">if</span> (lock.tryLock(<span class="hljs-number">2</span>, TimeUnit.SECONDS)) &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; acquired the lock.&quot;</span>);<br><br>            <span class="hljs-comment">// 模拟一些工作</span><br>            Thread.sleep(<span class="hljs-number">3000</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; could not acquire the lock within timeout.&quot;</span>);<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; was interrupted.&quot;</span>);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (lock.isHeldByCurrentThread()) &#123;<br>            lock.unlock();<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; released the lock.&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testTimeout</span><span class="hljs-params">(ReentrantLockExample example)</span> &#123;<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">threadA</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; example.doWork3(), <span class="hljs-string">&quot;Thread-A&quot;</span>);<br>    <span class="hljs-comment">// 创建一个线程 B，会尝试获取锁但会因为锁被线程A占用而超时</span><br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">threadB</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; example.doWork3(), <span class="hljs-string">&quot;Thread-B&quot;</span>);<br><br>    threadA.start();<br>    threadB.start();<br>&#125;<br></code></pre></td></tr></table></figure><p>会输出</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">Thread-B acquired <span class="hljs-keyword">the</span> lock.<br>Thread-A could <span class="hljs-keyword">not</span> acquire <span class="hljs-keyword">the</span> lock <span class="hljs-keyword">within</span> timeout.<br>Thread-B released <span class="hljs-keyword">the</span> lock.<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二叉树刷题笔记</title>
    <link href="/2024/08/30/tree-traverse/"/>
    <url>/2024/08/30/tree-traverse/</url>
    
    <content type="html"><![CDATA[<h1 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h1><h2 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h2><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title function_">preorderTraversal</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>    List&lt;Integer&gt; ans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    Stack&lt;TreeNode&gt; stk = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>    <span class="hljs-type">TreeNode</span> <span class="hljs-variable">curr</span> <span class="hljs-operator">=</span> root;<br>    <span class="hljs-keyword">while</span> (curr != <span class="hljs-literal">null</span> || !stk.isEmpty()) &#123;<br>        <span class="hljs-keyword">if</span> (curr != <span class="hljs-literal">null</span>) &#123;<br>            ans.add(curr.val);<br>            stk.push(curr);<br>            curr = curr.left;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            curr = stk.pop();<br>            curr = curr.right;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Morris"><a href="#Morris" class="headerlink" title="Morris"></a>Morris</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title function_">preorderTraversal</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>    List&lt;Integer&gt; ans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-type">TreeNode</span> <span class="hljs-variable">curr</span> <span class="hljs-operator">=</span> root, prev = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">while</span> (curr != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">if</span> (curr.left == <span class="hljs-literal">null</span>) &#123;<br>            ans.add(curr.val);<br>            curr = curr.right;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            prev = curr.left;<br>            <span class="hljs-keyword">while</span> (prev.right != <span class="hljs-literal">null</span> &amp;&amp; prev.right != curr) &#123;<br>                prev = prev.right;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (prev.right == <span class="hljs-literal">null</span>) &#123;<br>                ans.add(curr.val);<br>                prev.right = curr;<br>                curr = curr.left;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                prev.right = <span class="hljs-literal">null</span>;<br>                curr = curr.right;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title function_">inorderTraversal</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>    List&lt;Integer&gt; ans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    Stack&lt;TreeNode&gt; stk = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>    <span class="hljs-type">TreeNode</span> <span class="hljs-variable">curr</span> <span class="hljs-operator">=</span> root;<br>    <span class="hljs-keyword">while</span> (curr != <span class="hljs-literal">null</span> || !stk.isEmpty()) &#123;<br>        <span class="hljs-keyword">if</span> (curr != <span class="hljs-literal">null</span>) &#123;<br>            stk.push(curr);<br>            curr = curr.left;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            curr = stk.pop();<br>            ans.add(curr.val);<br>            curr = curr.right;<br>        &#125;<br>        <br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Morris-1"><a href="#Morris-1" class="headerlink" title="Morris"></a>Morris</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title function_">inorderTraversal</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>    List&lt;Integer&gt; ans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-type">TreeNode</span> <span class="hljs-variable">curr</span> <span class="hljs-operator">=</span> root, prev = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">while</span> (curr != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">if</span> (curr.left == <span class="hljs-literal">null</span>) &#123;<br>            ans.add(curr.val);<br>            curr = curr.right;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            prev = curr.left;<br>            <span class="hljs-keyword">while</span> (prev.right != <span class="hljs-literal">null</span> &amp;&amp; prev.right != curr) &#123;<br>                prev = prev.right;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (prev.right == <span class="hljs-literal">null</span>) &#123;<br>                prev.right = curr;<br>                curr = curr.left;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                prev.right = <span class="hljs-literal">null</span>;<br>                ans.add(curr.val);<br>                curr = curr.right;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title function_">postorderTraversal</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>    List&lt;Integer&gt; ans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br><br>    Stack&lt;TreeNode&gt; stk = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>    <span class="hljs-type">TreeNode</span> <span class="hljs-variable">prev</span> <span class="hljs-operator">=</span> root, curr = root;<br>    <span class="hljs-keyword">while</span> (curr != <span class="hljs-literal">null</span> || !stk.isEmpty()) &#123;<br>        <span class="hljs-keyword">if</span> (curr != <span class="hljs-literal">null</span>) &#123;<br>            stk.push(curr);<br>            curr = curr.left;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            curr = stk.pop();<br>            <span class="hljs-keyword">if</span> (curr.right == <span class="hljs-literal">null</span> || curr.right == prev) &#123;<br>                ans.add(curr.val);<br>                prev = curr;<br>                curr = <span class="hljs-literal">null</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                stk.push(curr);<br>                curr = curr.right;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="判断完全二叉树的结点个数"><a href="#判断完全二叉树的结点个数" class="headerlink" title="判断完全二叉树的结点个数"></a>判断完全二叉树的结点个数</h1><p>递归，当二叉树的左右深度不一样的时候，它一定不是满二叉树，但是完全二叉树的子树一定是完全二叉树，因此可以递归计算子树的节点数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">countNodes</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-type">TreeNode</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> root.left;<br>    <span class="hljs-type">TreeNode</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> root.right;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">leftLevel</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (left != <span class="hljs-literal">null</span>) &#123;<br>        leftLevel++;<br>        left = left.left;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">rightLevel</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (right != <span class="hljs-literal">null</span>) &#123;<br>        rightLevel++;<br>        right = right.right;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (leftLevel == rightLevel) &#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-number">1</span> &lt;&lt; (leftLevel + <span class="hljs-number">1</span>)) - <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> countNodes(root.left) + countNodes(root.right) + <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>带上下限的红包算法</title>
    <link href="/2024/08/29/redpacket/"/>
    <url>/2024/08/29/redpacket/</url>
    
    <content type="html"><![CDATA[<blockquote><p>群红包总金额m，分n份，每份下限x，上限y，生成一种的随机的可行分配方案</p></blockquote><h2 id="最简单的版本，随机"><a href="#最简单的版本，随机" class="headerlink" title="最简单的版本，随机"></a>最简单的版本，随机</h2><p>思路就是先分配最小金额，然后把剩下的金额不断随机加上去，直到为0。这种不太适合流式处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;Integer&gt; <span class="hljs-title function_">generateRedPacket</span><span class="hljs-params">(<span class="hljs-type">int</span> m, <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">minTotal</span> <span class="hljs-operator">=</span> n * x;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">maxTotal</span> <span class="hljs-operator">=</span> n * y;<br>    <span class="hljs-keyword">if</span> (m &gt; maxTotal || m &lt; minTotal) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-type">int</span> <span class="hljs-variable">remaining</span> <span class="hljs-operator">=</span> m - minTotal;<br>    <span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>    List&lt;Integer&gt; redPacket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        redPacket.add(x);<br>    &#125;<br><br>    <span class="hljs-type">int</span> <span class="hljs-variable">idx</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (remaining &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">maxAddition</span> <span class="hljs-operator">=</span> Math.min(y - redPacket.get(idx), remaining);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">addition</span> <span class="hljs-operator">=</span> r.nextInt(maxAddition + <span class="hljs-number">1</span>);<br>        redPacket.set(idx, addition + redPacket.get(idx));<br>        idx++;<br>        remaining -= addition;<br>    &#125;<br><br>    Collections.shuffle(redPacket, r);<br>    <span class="hljs-keyword">return</span> redPacket;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二倍均值法"><a href="#二倍均值法" class="headerlink" title="二倍均值法"></a>二倍均值法</h2><p>能保证生成10个红包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;Integer&gt; <span class="hljs-title function_">generateRedPacket2</span><span class="hljs-params">(<span class="hljs-type">int</span> m, <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">minTotal</span> <span class="hljs-operator">=</span> n * x;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">maxTotal</span> <span class="hljs-operator">=</span> n * y;<br>        <span class="hljs-keyword">if</span> (m &gt; maxTotal || m &lt; minTotal) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">remaining</span> <span class="hljs-operator">=</span> m;<br>        <span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        List&lt;Integer&gt; redPacket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">min</span> <span class="hljs-operator">=</span> Math.max(x, remaining - (n - i - <span class="hljs-number">1</span>) * y);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> Math.min(y, remaining - (n - i - <span class="hljs-number">1</span>) * x);<br><br>            <span class="hljs-type">int</span> <span class="hljs-variable">amount</span> <span class="hljs-operator">=</span> min + r.nextInt(max - min + <span class="hljs-number">1</span>);<br>            redPacket.add(amount);<br>            remaining -= amount;<br>        &#125;<br><br>        Collections.shuffle(redPacket, r);<br>        <span class="hljs-keyword">return</span> redPacket;<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>场景题和系统设计</title>
    <link href="/2024/08/26/system-design/"/>
    <url>/2024/08/26/system-design/</url>
    
    <content type="html"><![CDATA[<h2 id="分布式id"><a href="#分布式id" class="headerlink" title="分布式id"></a>分布式id</h2><ul><li>唯一</li><li>高可用</li><li>高性能：生成速度快、资源消耗小</li><li>有序性：趋势递增</li><li>安全：需要脱敏，不能包含订单数量等敏感信息</li></ul><h3 id="数据库主键自增"><a href="#数据库主键自增" class="headerlink" title="数据库主键自增"></a>数据库主键自增</h3><h3 id="数据库号段"><a href="#数据库号段" class="headerlink" title="数据库号段"></a>数据库号段</h3><p>其实就是批量获取一批号，<code>current_max_id</code>到<code>current_max_id + step</code>，减少数据库的访问次数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `sequence_id_generator` (<br>  `id` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `current_max_id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;当前最大id&#x27;</span>,<br>  `step` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;号段的长度&#x27;</span>,<br>  `version` <span class="hljs-type">int</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;版本号&#x27;</span>,<br>  `biz_type`    <span class="hljs-type">int</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;业务类型&#x27;</span>,<br>   <span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb4;<br></code></pre></td></tr></table></figure><p>上面两种都存在单点问题和安全问题（可以推算出订单量），而且id没有业务含义</p><h3 id="redis-incr"><a href="#redis-incr" class="headerlink" title="redis incr"></a>redis incr</h3><h3 id="UUID"><a href="#UUID" class="headerlink" title="UUID"></a>UUID</h3><ul><li>优点：生成速度快</li><li>缺点：存储消耗空间大、无序、基于mac地址生成的uuid不安全、无业务含义、重复问题</li></ul><h3 id="snowflake"><a href="#snowflake" class="headerlink" title="snowflake"></a>snowflake</h3><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">*</span><span class="hljs-literal">------</span><span class="hljs-comment">*</span><span class="hljs-literal">------------</span><span class="hljs-comment">*</span><span class="hljs-literal">----------------</span><span class="hljs-comment">*</span><span class="hljs-literal">-------------</span><span class="hljs-comment">*</span><span class="hljs-literal">-----------</span><span class="hljs-comment">*</span><br><span class="hljs-comment">| sign | timestamp  | datacenter id  |  worker id  | sequence  |</span><br><span class="hljs-comment">*</span><span class="hljs-literal">------</span><span class="hljs-comment">*</span><span class="hljs-literal">------------</span><span class="hljs-comment">*</span><span class="hljs-literal">----------------</span><span class="hljs-comment">*</span><span class="hljs-literal">-------------</span><span class="hljs-comment">*</span><span class="hljs-literal">-----------</span><span class="hljs-comment">*</span><br>  <span class="hljs-comment">1bits    41bits       5bits             5bits        12bits</span>      <br></code></pre></td></tr></table></figure><ul><li>sign：默认为0，表示正数</li><li>timestamp：时间戳，默认为ms</li><li>sequence：单台机器每毫秒能产生的最大id数</li></ul><p>优缺点</p><ul><li>优点：生成速度快，id有序递增</li><li>缺点：重复id（时间回拨），依赖机器id对分布式环境不友好</li></ul><h2 id="分布式锁实现"><a href="#分布式锁实现" class="headerlink" title="分布式锁实现"></a>分布式锁实现</h2><h3 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h3><ul><li>存储空间，可以访问到</li><li>唯一标识</li><li>至少两种状态</li></ul><h3 id="典型实现"><a href="#典型实现" class="headerlink" title="典型实现"></a>典型实现</h3><ul><li>Zookeeper：先创建临时顺序节点，然后get得到所有创建的子节点，如果序号最小，认为得到锁，否则监视minmax节点，尝试继续获取锁，释放锁则删除节点。临时节点可以在网络故障的时候自动解锁，防止死锁。</li><li>Redis：setnx，判断超时，getset设置新值返回旧值，如果还是超时说明获取了锁，否则获取失败。（会有全局时钟问题）</li><li>MySQL</li></ul><h3 id="MySQL分布式锁"><a href="#MySQL分布式锁" class="headerlink" title="MySQL分布式锁"></a>MySQL分布式锁</h3><h4 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> distributed_locks (<br>    lock_name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">PRIMARY</span> KEY,<br>    locked_by <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    locked_at <span class="hljs-type">TIMESTAMP</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span>,<br>    expires_at <span class="hljs-type">TIMESTAMP</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br>);<br></code></pre></td></tr></table></figure><p><strong>加锁</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> distributed_locks (lock_name, locked_by, locked_at, expires_at)<br><span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;my_lock&#x27;</span>, <span class="hljs-string">&#x27;unique_client_id&#x27;</span>, <span class="hljs-built_in">CURRENT_TIMESTAMP</span>, DATE_ADD(<span class="hljs-built_in">CURRENT_TIMESTAMP</span>, <span class="hljs-type">INTERVAL</span> <span class="hljs-number">30</span> <span class="hljs-keyword">SECOND</span>))<br><span class="hljs-keyword">ON</span> DUPLICATE KEY <span class="hljs-keyword">UPDATE</span><br>    locked_by <span class="hljs-operator">=</span> IF(expires_at <span class="hljs-operator">&lt;</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span>, <span class="hljs-string">&#x27;unique_client_id&#x27;</span>, locked_by),<br>    locked_at <span class="hljs-operator">=</span> IF(expires_at <span class="hljs-operator">&lt;</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span>, <span class="hljs-built_in">CURRENT_TIMESTAMP</span>, locked_at),<br>    expires_at <span class="hljs-operator">=</span> IF(expires_at <span class="hljs-operator">&lt;</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span>, DATE_ADD(<span class="hljs-built_in">CURRENT_TIMESTAMP</span>, <span class="hljs-type">INTERVAL</span> <span class="hljs-number">30</span> <span class="hljs-keyword">SECOND</span>), expires_at);<br></code></pre></td></tr></table></figure><p><strong>解锁</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> distributed_locks <span class="hljs-keyword">WHERE</span> lock_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;my_lock&#x27;</span> <span class="hljs-keyword">AND</span> locked_by <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;unique_client_id&#x27;</span>;<br></code></pre></td></tr></table></figure><h4 id="select-for-update"><a href="#select-for-update" class="headerlink" title="select for update"></a>select for update</h4><p><strong>加锁</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">START</span> TRANSACTION;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> distributed_locks <span class="hljs-keyword">WHERE</span> lock_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;my_lock&#x27;</span> <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">UPDATE</span>;<br><br><span class="hljs-comment">-- 如果记录不存在，插入新锁记录</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> distributed_locks (lock_name, locked_by) <br><span class="hljs-keyword">SELECT</span> <span class="hljs-string">&#x27;my_lock&#x27;</span>, <span class="hljs-string">&#x27;unique_client_id&#x27;</span><br><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> (<span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> distributed_locks <span class="hljs-keyword">WHERE</span> lock_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;my_lock&#x27;</span>);<br><span class="hljs-keyword">COMMIT</span>;<br></code></pre></td></tr></table></figure><p><strong>解锁</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">START</span> TRANSACTION;<br><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> distributed_locks <span class="hljs-keyword">WHERE</span> lock_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;my_lock&#x27;</span> <span class="hljs-keyword">AND</span> locked_by <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;unique_client_id&#x27;</span>;<br><span class="hljs-keyword">COMMIT</span>;<br></code></pre></td></tr></table></figure><h2 id="设计秒杀系统"><a href="#设计秒杀系统" class="headerlink" title="设计秒杀系统"></a>设计秒杀系统</h2><h3 id="高性能"><a href="#高性能" class="headerlink" title="高性能"></a>高性能</h3><p>热key二级缓存：热点数据可以在redis写一份，jvm内存写一份（访问最快）</p><p>如何检测热key，京东的解决方案？</p><ul><li>etcd集群：worker ip和规则配置，例如userId_ 开头的key，每2s出现20次算热key之类的，过期时间之类的</li><li>worker：上报ip，监听和计算client发来的key，达到规则的阈值后推送到client和etcd</li><li>client：获取规则，worker ip等，定时任务每500ms批量发送一批待测key到worker（经过shard能保证固定的key的到同一个机器），已经热了的key不会再发送。收到worker推送的热key后，本地caffeine缓存。</li></ul><h3 id="高可用"><a href="#高可用" class="headerlink" title="高可用"></a>高可用</h3><ul><li>Redis集群，哨兵</li><li>限流<ul><li>根据ip、用户限流</li><li>验证码</li><li>提前预约</li></ul></li><li>流量削峰</li><li>降级：优先保障核心功能，比如关闭视频评论，保留播放功能</li><li>熔断：比如A要调B的接口，但是B出故障了，当A调B的失败次数到阈值后，停止A对B的调用</li></ul><h3 id="一致性"><a href="#一致性" class="headerlink" title="一致性"></a>一致性</h3><ul><li>减库存方案：下单减库存（即使不付款）<ul><li>不超卖：秒杀商品在缓存中，lua脚本，Redis中减库存成功，通过MQ异步更新到MySQL，达到最终一致性</li></ul></li><li>余额扣减方案：悲观锁，MySQL的select for update，并发量不高可以使用乐观锁</li><li>接口幂等：悲观锁、乐观锁、token、唯一索引、分布式锁<ul><li>token：第一次请求时，服务器生成token带过期时间的，存入redis，第二次请求header带上token，后面先删除token再执行请求（大不了重写生成token，好过带着token再进行第二次非法操作）</li></ul></li></ul><h2 id="Feed流实现"><a href="#Feed流实现" class="headerlink" title="Feed流实现"></a>Feed流实现</h2><h3 id="什么是Feed流"><a href="#什么是Feed流" class="headerlink" title="什么是Feed流"></a>什么是Feed流</h3><p>知乎、抖音首页推荐，朋友圈动态等。</p><ul><li>纯智能推荐：兴趣点</li><li>纯Timeline：时间线</li><li>两者结合</li></ul><h3 id="架构设计"><a href="#架构设计" class="headerlink" title="架构设计"></a>架构设计</h3><ul><li>推模式：写入数据库太多</li><li>拉模式：存储成本低，但是实时性差</li><li>推拉结合：推模式写入活跃用户的数据库，不活跃的用户自己去拉</li></ul><h2 id="短链系统"><a href="#短链系统" class="headerlink" title="短链系统"></a>短链系统</h2><h3 id="为什么要有短链"><a href="#为什么要有短链" class="headerlink" title="为什么要有短链"></a>为什么要有短链</h3><ul><li>短信字数限制</li><li>微博字数限制</li><li>长链生成的二维码太过复杂</li></ul><h3 id="短链生成"><a href="#短链生成" class="headerlink" title="短链生成"></a>短链生成</h3><p>比较一般的方法</p><ul><li>现在redis中查找长链，找到则说明已经生成</li><li>没找到就MD5或者murmurhash生成，转成62进制短码，拼成短网址，检查短网址是否存在于redis</li><li>如果不存在，保存长链到短链和短链到长链的映射，返回，结束</li><li>存在说明发生哈希冲突，加盐生成短码直到没有冲突</li></ul><p>存在的问题？</p><ul><li>外部操作太多，访问redis，hbase等</li><li>随着数量增加，哈希碰撞增加</li><li>大部分短链的有效期很短，1个月后就不再访问了，可以优化生成服务</li></ul><p>如何优化？</p><ul><li>采用自增算法生成短码</li><li>去掉长短映射（没必要）</li><li>内存自增+缓存批量区号（比如一次取10000个）</li><li>30天内有一次访问重置30天有效期，否则删除</li></ul><h2 id="第三方授权登录"><a href="#第三方授权登录" class="headerlink" title="第三方授权登录"></a>第三方授权登录</h2><h3 id="OAuth-2-0"><a href="#OAuth-2-0" class="headerlink" title="OAuth 2.0"></a>OAuth 2.0</h3><p>为第三方应用颁发一个有时效性的token，使第三方应用能通过token得到用户的信息</p><ul><li>客户端向用户发送授权申请</li><li>用户同意授权</li><li>客户端使用获得的<strong>授权码</strong>，向认证服务器申请access token</li><li>认证服务器认证后，发放token</li><li>客户端使用token，向资源服务器申请资源</li><li>资源服务器确认token有效，发放资源</li></ul><p>授权码有效期一般为5-20min，只能使用一次</p><h3 id="二维码登录"><a href="#二维码登录" class="headerlink" title="二维码登录"></a>二维码登录</h3><p>扫码登录可以分为三个阶段：未扫描、已扫描待确认、已确认</p><ul><li>pc携带设备信息发送生成二维码请求至服务器</li><li>服务器生成二维码id，并和设备绑定，返回二维码id</li><li>pc启动定时任务轮询服务器二维码状态，直到成功</li><li>用户扫描二维码，将手机登录凭证(token)和二维码id发送给服务器</li><li>服务器将二维码id和用户身份信息绑定，返回临时token至用户</li><li>用户携带临时token确认登录</li><li>服务器更改二维码状态为已确认，生成pc端token</li><li>pc由于一直在轮询二维码状态，所以会得到token，后续可以凭借token访问服务端api</li></ul><h2 id="优惠券系统"><a href="#优惠券系统" class="headerlink" title="优惠券系统"></a>优惠券系统</h2><p>券模板、券记录都需要持久化</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>HashMap并发问题探究</title>
    <link href="/2024/08/22/hashmap/"/>
    <url>/2024/08/22/hashmap/</url>
    
    <content type="html"><![CDATA[<blockquote><p>字节面试官问了一个问题，为什么实习的项目里用ConcurrentHashMap而不是HashMap，这个map只是单线程在更新，其实用普通的HashMap也可以？我回答的是并发写的时候会有问题，应该不太对。下面使用jdk 1.8来验证一下。</p></blockquote><p>其实我的实习项目里是先更新数据库，然后增量更新缓存。如果主线程和定时任务都在更新缓存的话，是会有写写并发的问题的。但这应该不是主要的原因。（写写并发带来的是脏数据和数据丢失的问题）。</p><p>真正的原因应该是主线程的读和定时任务的写并发时带来的问题</p><ul><li>数据可见性：put操作不一定会被get看到</li><li>错误数据：扩容rehash的过程中get可能返回错误的数据</li><li>死循环：主要是在rehash的过程中</li></ul><hr><h2 id="写写并发"><a href="#写写并发" class="headerlink" title="写写并发"></a>写写并发</h2><p>下面举个例子，2个线程往map里面put，跑100次，ConcurrentHashMap不会出现并发问题，但是HashMap会出现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">putTask</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">getTask</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">step</span> <span class="hljs-operator">=</span> <span class="hljs-number">1000</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hashMapConcurrentWrite</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    Map&lt;Item, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-type">CountDownLatch</span> <span class="hljs-variable">countDownLatch</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CountDownLatch</span>(putTask);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">taskId</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; taskId &lt; putTask; taskId++) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">finalTaskId</span> <span class="hljs-operator">=</span> taskId;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> finalTaskId * step;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> start + step;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> start; i &lt; end; i++) &#123;<br>                    map.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Item</span>(i), i);<br>                &#125;<br>                countDownLatch.countDown();<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;test-&quot;</span> + taskId).start();<br>    &#125;<br>    countDownLatch.await();<br>    System.out.println(map.size());<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testHashMapConcurrentWrite</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.printf(<span class="hljs-string">&quot;i = %d &quot;</span>, i);<br>            hashMapConcurrentWrite();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="脏数据、数据丢失"><a href="#脏数据、数据丢失" class="headerlink" title="脏数据、数据丢失"></a>脏数据、数据丢失</h3><p>正确的数量应该是2000个，但是实际的数量往往比2000小</p><h3 id="StackOverFlowError"><a href="#StackOverFlowError" class="headerlink" title="StackOverFlowError"></a>StackOverFlowError</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">Exception <span class="hljs-keyword">in</span> thread <span class="hljs-string">&quot;test-0&quot;</span> Exception <span class="hljs-keyword">in</span> thread <span class="hljs-string">&quot;test-1&quot;</span> java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.StackOverflowError</span><br>at java<span class="hljs-selector-class">.util</span>.HashMap<span class="hljs-variable">$TreeNode</span><span class="hljs-selector-class">.find</span>(HashMap<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1901</span>)<br>    ...<br></code></pre></td></tr></table></figure><h3 id="ClassCastException"><a href="#ClassCastException" class="headerlink" title="ClassCastException"></a>ClassCastException</h3><p>在Node转为TreeNode的时候，出现类转换异常</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs stylus">test-<span class="hljs-number">0</span> ClassCastException caught: java<span class="hljs-selector-class">.util</span>.HashMap<span class="hljs-variable">$Node</span> cannot be cast to java<span class="hljs-selector-class">.util</span>.HashMap<span class="hljs-variable">$TreeNode</span><br>java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.ClassCastException</span>: java<span class="hljs-selector-class">.util</span>.HashMap<span class="hljs-variable">$Node</span> cannot be cast to java<span class="hljs-selector-class">.util</span>.HashMap<span class="hljs-variable">$TreeNode</span><br>at java<span class="hljs-selector-class">.util</span>.HashMap<span class="hljs-variable">$TreeNode</span><span class="hljs-selector-class">.moveRootToFront</span>(HashMap<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1859</span>)<br>at java<span class="hljs-selector-class">.util</span>.HashMap<span class="hljs-variable">$TreeNode</span><span class="hljs-selector-class">.treeify</span>(HashMap<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1975</span>)<br>at java<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.HashMap</span><span class="hljs-selector-class">.treeifyBin</span>(HashMap<span class="hljs-selector-class">.java</span>:<span class="hljs-number">773</span>)<br>at java<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.HashMap</span><span class="hljs-selector-class">.putVal</span>(HashMap<span class="hljs-selector-class">.java</span>:<span class="hljs-number">645</span>)<br>at java<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.HashMap</span><span class="hljs-selector-class">.put</span>(HashMap<span class="hljs-selector-class">.java</span>:<span class="hljs-number">613</span>)<br>at org<span class="hljs-selector-class">.example</span>.HashMapTest$<span class="hljs-number">1</span><span class="hljs-selector-class">.run</span>(HashMapTest<span class="hljs-selector-class">.java</span>:<span class="hljs-number">42</span>)<br>at java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.Thread</span><span class="hljs-selector-class">.run</span>(Thread<span class="hljs-selector-class">.java</span>:<span class="hljs-number">750</span>)<br>test-<span class="hljs-number">1</span> ClassCastException caught: java<span class="hljs-selector-class">.util</span>.HashMap<span class="hljs-variable">$Node</span> cannot be cast to java<span class="hljs-selector-class">.util</span>.HashMap<span class="hljs-variable">$TreeNode</span><br>java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.ClassCastException</span>: java<span class="hljs-selector-class">.util</span>.HashMap<span class="hljs-variable">$Node</span> cannot be cast to java<span class="hljs-selector-class">.util</span>.HashMap<span class="hljs-variable">$TreeNode</span><br>at java<span class="hljs-selector-class">.util</span>.HashMap<span class="hljs-variable">$TreeNode</span><span class="hljs-selector-class">.moveRootToFront</span>(HashMap<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1859</span>)<br>at java<span class="hljs-selector-class">.util</span>.HashMap<span class="hljs-variable">$TreeNode</span><span class="hljs-selector-class">.treeify</span>(HashMap<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1975</span>)<br>at java<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.HashMap</span><span class="hljs-selector-class">.treeifyBin</span>(HashMap<span class="hljs-selector-class">.java</span>:<span class="hljs-number">773</span>)<br>at java<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.HashMap</span><span class="hljs-selector-class">.putVal</span>(HashMap<span class="hljs-selector-class">.java</span>:<span class="hljs-number">645</span>)<br>at java<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.HashMap</span><span class="hljs-selector-class">.put</span>(HashMap<span class="hljs-selector-class">.java</span>:<span class="hljs-number">613</span>)<br>at org<span class="hljs-selector-class">.example</span>.HashMapTest$<span class="hljs-number">1</span><span class="hljs-selector-class">.run</span>(HashMapTest<span class="hljs-selector-class">.java</span>:<span class="hljs-number">42</span>)<br></code></pre></td></tr></table></figure><h3 id="死循环"><a href="#死循环" class="headerlink" title="死循环"></a>死循环</h3><hr><h2 id="HashMap原理"><a href="#HashMap原理" class="headerlink" title="HashMap原理"></a>HashMap原理</h2><h3 id="put"><a href="#put" class="headerlink" title="put"></a>put</h3><p>之前一直没搞懂put的树化到底是桶上已经插入了7个结点还是8个，答案应该是在<strong>已经</strong>插入8个结点的时候，<strong>要插入第9个结点的时候</strong>，会先将这个节点尾插至链表，然后<code>treeifyBin</code>，但是真正的树化需要目前已有的桶的数量等于<code>MIN_TREEIFY_CAPACITY</code>（一般是64）才可以，否则只是二倍扩容。</p><p>一个小测试，通过重写hashCode的方法，使得元素hash后只会存在hashCode为0和1的两个桶。下面这个只会在<code>i = 17</code>的时候树化，当<code>i = 16</code>的时候，由于桶的数量还没有到64，只有32，所以会先扩容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Item</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    Item(<span class="hljs-type">int</span> id) &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id % <span class="hljs-number">2</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testTreeify</span><span class="hljs-params">()</span> &#123;<br>    Map&lt;Item, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br>        map.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Item</span>(i), i);<br>    &#125;<br><br>    System.out.println(map.size());<br>&#125;<br></code></pre></td></tr></table></figure><p>其实这个例子会经过三次扩容，然后插入第18个元素（<code>i = 17</code>）才树化</p><ul><li>第一次扩容：插入第1个元素，容量变为16，阈值为12</li><li>第二次扩容：插入第13个元素，容量变为32，阈值为24</li><li>第三次扩容：插入第17个元素（<code>i = 16</code>），容量变为64，阈值变为48</li><li>再多插入一个元素，就扩容了</li></ul><p>下面对put的源码进行剖析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> V <span class="hljs-title function_">put</span><span class="hljs-params">(K key, V value)</span> &#123;<br>    <span class="hljs-keyword">return</span> putVal(hash(key), key, value, <span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>);<br>&#125;<br><span class="hljs-keyword">final</span> V <span class="hljs-title function_">putVal</span><span class="hljs-params">(<span class="hljs-type">int</span> hash, K key, V value, <span class="hljs-type">boolean</span> onlyIfAbsent,</span><br><span class="hljs-params">                <span class="hljs-type">boolean</span> evict)</span> &#123;<br>    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="hljs-type">int</span> n, i;<br>    <span class="hljs-keyword">if</span> ((tab = table) == <span class="hljs-literal">null</span> || (n = tab.length) == <span class="hljs-number">0</span>)<br>        n = (tab = resize()).length;<br>    <span class="hljs-keyword">if</span> ((p = tab[i = (n - <span class="hljs-number">1</span>) &amp; hash]) == <span class="hljs-literal">null</span>)<br>        tab[i] = newNode(hash, key, value, <span class="hljs-literal">null</span>);<br>    <span class="hljs-keyword">else</span> &#123;<br>        Node&lt;K,V&gt; e; K k;<br>        <span class="hljs-keyword">if</span> (p.hash == hash &amp;&amp;<br>            ((k = p.key) == key || (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k))))<br>            e = p;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p <span class="hljs-keyword">instanceof</span> TreeNode)<br>            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="hljs-built_in">this</span>, tab, hash, key, value);<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">binCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; ; ++binCount) &#123;<br>                <span class="hljs-keyword">if</span> ((e = p.next) == <span class="hljs-literal">null</span>) &#123;<br>                    p.next = newNode(hash, key, value, <span class="hljs-literal">null</span>);<br>                    <span class="hljs-keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="hljs-number">1</span>) <span class="hljs-comment">// -1 for 1st</span><br>                        treeifyBin(tab, hash);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (e.hash == hash &amp;&amp;<br>                    ((k = e.key) == key || (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k))))<br>                    <span class="hljs-keyword">break</span>;<br>                p = e;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (e != <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// existing mapping for key</span><br>            <span class="hljs-type">V</span> <span class="hljs-variable">oldValue</span> <span class="hljs-operator">=</span> e.value;<br>            <span class="hljs-keyword">if</span> (!onlyIfAbsent || oldValue == <span class="hljs-literal">null</span>)<br>                e.value = value;<br>            afterNodeAccess(e);<br>            <span class="hljs-keyword">return</span> oldValue;<br>        &#125;<br>    &#125;<br>    ++modCount;<br>    <span class="hljs-keyword">if</span> (++size &gt; threshold)<br>        resize();<br>    afterNodeInsertion(evict);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="resize扩容"><a href="#resize扩容" class="headerlink" title="resize扩容"></a>resize扩容</h3><p>HashMap在new的时候其实不会真的给元素分配内存，而是有点lazy init的感觉，当插入第一个元素的时候，调用resize方法去分配空间。</p><p><strong>假设我们没有指定初始容量</strong></p><p>第一次扩容的时候</p><ul><li>oldTab: null</li><li>oldCap: 0</li><li>oldThr: 0</li></ul><p>之后会进入else分支</p><ul><li>newCap: DEFAULT_INITIAL_CAPACITY(16)</li><li>newThr: 12</li></ul><p>第二次扩容的时候</p><ul><li>oldTab: not null</li><li>oldCap: 16</li><li>oldThr: 12</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;<br>    Node&lt;K,V&gt;[] oldTab = table;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">oldCap</span> <span class="hljs-operator">=</span> (oldTab == <span class="hljs-literal">null</span>) ? <span class="hljs-number">0</span> : oldTab.length;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">oldThr</span> <span class="hljs-operator">=</span> threshold;<br>    <span class="hljs-type">int</span> newCap, newThr = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (oldCap &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;<br>            threshold = Integer.MAX_VALUE;<br>            <span class="hljs-keyword">return</span> oldTab;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="hljs-number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;<br>                    oldCap &gt;= DEFAULT_INITIAL_CAPACITY)<br>            newThr = oldThr &lt;&lt; <span class="hljs-number">1</span>; <span class="hljs-comment">// double threshold</span><br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (oldThr &gt; <span class="hljs-number">0</span>) <span class="hljs-comment">// initial capacity was placed in threshold</span><br>        newCap = oldThr;<br>    <span class="hljs-keyword">else</span> &#123;               <span class="hljs-comment">// zero initial threshold signifies using defaults</span><br>        newCap = DEFAULT_INITIAL_CAPACITY;<br>        newThr = (<span class="hljs-type">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (newThr == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-type">float</span> <span class="hljs-variable">ft</span> <span class="hljs-operator">=</span> (<span class="hljs-type">float</span>)newCap * loadFactor;<br>        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="hljs-type">float</span>)MAXIMUM_CAPACITY ?<br>                    (<span class="hljs-type">int</span>)ft : Integer.MAX_VALUE);<br>    &#125;<br>    threshold = newThr;<br>    <span class="hljs-comment">//...</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k8s搭建mysql集群</title>
    <link href="/2024/05/05/k8s%E6%90%AD%E5%BB%BAmysql%E9%9B%86%E7%BE%A4/"/>
    <url>/2024/05/05/k8s%E6%90%AD%E5%BB%BAmysql%E9%9B%86%E7%BE%A4/</url>
    
    <content type="html"><![CDATA[<p>一台32G内存的Ubuntu 22.04机器上起了三个虚拟机搭建mysql集群。</p> <span id="more"></span><p>| 最近在做一些微服务相关的工作，于是五一花了2.5天时间搭了个一主二从mysql集群。整个过程相当曲折，四处碰壁。搭完后就想着记录一下。</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>物理机配置</p><ul><li>内存：32GB</li><li>CPU：20核</li><li>操作系统：Ubuntu 22.04</li></ul><p>虚拟机配置</p><ul><li>CPU: 4核</li><li>内存：4G</li><li>存储：30G</li><li>基础镜像：ubuntu-22.04.4-live-server-amd64.iso</li><li>k8s version: v1.29</li></ul><h1 id="虚拟机创建"><a href="#虚拟机创建" class="headerlink" title="虚拟机创建"></a>虚拟机创建</h1><p>虚拟机之间使用网桥通信。因此需要在宿主机上先创建好虚拟机之间以及虚拟机和宿主机之间通信的网桥。网桥的ip地址为192.168.100.1。三个虚拟机的地址为192.168.100.2(k3s-master), 192.168.100.3(k3s-node1), 192.168.100.4(k3s-node2)。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 都在sudo下</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">ip </span>link <span class="hljs-built_in">add</span> name br0<span class="hljs-built_in"> type bridge</span><br><span class="hljs-built_in">ip </span>addr <span class="hljs-built_in">add</span> 192.168.100.1/24 brd + dev br0<span class="hljs-built_in"></span><br><span class="hljs-built_in">ip </span>link <span class="hljs-built_in">set</span> br0 up<br><br><span class="hljs-comment"># 开启 ip_forward</span><br>sysctl -w net.ipv4.<span class="hljs-attribute">ip_forward</span>=1<br><br><span class="hljs-comment"># 允许对从 br0 流入的数据包进行 FORWARD</span><br>iptables -t<span class="hljs-built_in"> filter </span>-A FORWARD -i br0 -j ACCEPT<br>iptables -t<span class="hljs-built_in"> filter </span>-A FORWARD -o br0 -j ACCEPT<br><br><span class="hljs-comment"># 也可以直接将 filter FORWARD 策略直接设置为 ACCEPT</span><br><span class="hljs-comment"># iptables -t filter -P FORWARD ACCEPT</span><br><br><span class="hljs-comment"># 开启 NAT</span><br>iptables -t<span class="hljs-built_in"> nat </span>-A POSTROUTING -o eno1 -j MASQUERADE<br></code></pre></td></tr></table></figure><p>准备虚拟磁盘</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">qemu-<span class="hljs-selector-tag">img</span> create -f qcow2 ubuntu-vm1<span class="hljs-selector-class">.qcow2</span> <span class="hljs-number">30</span>G<br></code></pre></td></tr></table></figure><p>创建虚拟机。其实创建虚拟机以及准备k8s相关的包，这些工作可以只在k3s-master上进行，之后把虚拟磁盘复制一下就好。因此下面只讲k3s-master的初始化工作。</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs livescript">qemu-system-x86_64 <span class="hljs-string">\</span><br>  -m <span class="hljs-number">4</span>G -smp <span class="hljs-number">4</span> <span class="hljs-string">\</span><br>  -cpu host,vmx=<span class="hljs-literal">on</span> <span class="hljs-string">\</span><br>  -hda ubuntu-vm1.qcow2 <span class="hljs-string">\</span><br>  -cdrom ubuntu-<span class="hljs-number">22.04</span>.<span class="hljs-number">4</span>-live-server-amd64.iso <span class="hljs-string">\</span><br>  -boot d <span class="hljs-string">\</span><br>  -enable-kvm <span class="hljs-string">\</span><br>  -nic bridge,br=br0,model=virtio-net-pci <span class="hljs-string">\</span><br>  -daemonize<br></code></pre></td></tr></table></figure><p>启动虚拟机，需要在root用户下。为了方便，建议所有命令都在root用户下执行，不然会有权限问题。这里需要人为分配网卡的mac地址。</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs livescript">sudo qemu-system-x86_64 <span class="hljs-string">\</span><br>  -m <span class="hljs-number">4</span>G -smp <span class="hljs-number">4</span> <span class="hljs-string">\</span><br>  -cpu host,vmx=<span class="hljs-literal">on</span> <span class="hljs-string">\</span><br>  -hda ubuntu-vm1.qcow2 <span class="hljs-string">\</span><br>  -enable-kvm <span class="hljs-string">\</span><br>  -net nic,macaddr=<span class="hljs-number">52</span>:<span class="hljs-number">54</span>:<span class="hljs-number">00</span>:<span class="hljs-number">12</span>:<span class="hljs-number">34</span>:<span class="hljs-number">57</span> -net bridge,br=br0 <span class="hljs-string">\</span><br>  -daemonize<br></code></pre></td></tr></table></figure><p>这样之后可以ssh <a href="mailto:&#x75;&#x73;&#101;&#x72;&#64;&#x31;&#57;&#x32;&#x2e;&#49;&#x36;&#x38;&#46;&#49;&#x30;&#48;&#46;&#x32;">&#x75;&#x73;&#101;&#x72;&#64;&#x31;&#57;&#x32;&#x2e;&#49;&#x36;&#x38;&#46;&#49;&#x30;&#48;&#46;&#x32;</a>连接到虚拟机了。</p><p>根据官网教程，安装必要的包<br><a href="https://v1-29.docs.kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/">install-kubeadm</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt-get update<br><span class="hljs-comment"># apt-transport-https may be a dummy package; if so, you can skip that package</span><br><span class="hljs-built_in">sudo</span> apt-get install -y apt-transport-https ca-certificates curl gpg<br><br><span class="hljs-comment"># If the directory `/etc/apt/keyrings` does not exist, it should be created before the curl command, read the note below.</span><br><span class="hljs-comment"># sudo mkdir -p -m 755 /etc/apt/keyrings</span><br>curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key | <span class="hljs-built_in">sudo</span> gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg<br><br><span class="hljs-comment"># This overwrites any existing configuration in /etc/apt/sources.list.d/kubernetes.list</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /&#x27;</span> | <span class="hljs-built_in">sudo</span> <span class="hljs-built_in">tee</span> /etc/apt/sources.list.d/kubernetes.list<br><br><span class="hljs-built_in">sudo</span> apt-get update<br><span class="hljs-built_in">sudo</span> apt-get install -y kubelet kubeadm kubectl docker.io<br><span class="hljs-built_in">sudo</span> apt-mark hold kubelet kubeadm kubectl<br></code></pre></td></tr></table></figure><p>现在这个虚拟磁盘上已经有k8s必须的组件了。当想要启动k3s-node1和k3s-node2时，复制这个master的虚拟磁盘。</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-keyword">cp</span> -av ubuntu-vm1.qcow2 ubuntu-vm2.qcow2<br></code></pre></td></tr></table></figure><p>下面进行三个虚拟机的网络配置。需要为每个node分配一个独一无二的ip地址。可以用下面的命令来设置。但是下面的命令设置不能持久化到虚拟机，也就是说虚拟机重启时，配置的网桥和ip都会消失。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 进入虚拟机后配置网卡</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">ip </span>addr <span class="hljs-built_in">add</span> 192.168.100.2/24 brd + dev ens3<span class="hljs-built_in"></span><br><span class="hljs-built_in">ip route </span><span class="hljs-built_in">add</span><span class="hljs-built_in"> default </span>via 192.168.100.1 dev ens3<br><br><span class="hljs-comment"># 按需修改 /etc/resolv.conf 配置 DNS 服务器，不改的话只能ping ip地址</span><br>nameserver 8.8.8.8<br></code></pre></td></tr></table></figure><p>如何持久化网络配置呢？</p><p>ubuntu需要修改<code>/etc/netplan/00-installer-config.yaml</code>文件。其实这个操作可以在复制虚拟磁盘前完成，之后在每个虚拟机里面修改这个文件里的ip地址就好了。</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">network</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">ethernets</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">ens3</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-comment">#dhcp4: true</span><br>      <span class="hljs-attribute">addresses</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[192.168.100.2/24]</span><br>      <span class="hljs-attribute">nameservers</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">addresses</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[8.8.8.8]</span><br>      <span class="hljs-attribute">routes</span><span class="hljs-punctuation">:</span><br>       <span class="hljs-bullet">-</span> <span class="hljs-string">to: default</span><br>         <span class="hljs-attribute">via</span><span class="hljs-punctuation">:</span> <span class="hljs-string">192.168.100.1</span><br>  <span class="hljs-attribute">version</span><span class="hljs-punctuation">:</span> <span class="hljs-string">2</span><br></code></pre></td></tr></table></figure><h1 id="k8s集群"><a href="#k8s集群" class="headerlink" title="k8s集群"></a>k8s集群</h1><p>首先需要做一些准备工作，在三个节点上都需要做。因为有些东西是过时的，需要修改。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 禁止swap，非常重要</span><br>swapoff -a<br><br><span class="hljs-comment"># 修改容器运行时，不然会说找不到dockershim（已经被弃用了）</span><br><span class="hljs-comment"># ERRO[0000] validate service connection: validate CRI v1 image API for endpoint &quot;unix:///var/run/dockershim.sock&quot;</span><br>crictl config runtime-endpoint unix:<span class="hljs-regexp">//</span><span class="hljs-regexp">/var/</span>run<span class="hljs-regexp">/containerd/</span>containerd.sock<br>crictl config image-endpoint unix:<span class="hljs-regexp">//</span><span class="hljs-regexp">/run/</span>containerd/containerd.sock<br><br><br><span class="hljs-comment"># detected that the sandbox image &quot;registry.k8s.io/pause:3.8&quot; of the container runtime is inconsistent with that used by kubeadm. It is recommended that using &quot;registry.k8s.io/pause:3.9&quot; as the CRI sandbox image.</span><br><br>sudo mkdir <span class="hljs-regexp">/etc/</span>containerd<br>containerd config default | sudo tee <span class="hljs-regexp">/etc/</span>containerd/config.toml<br>sudo vim <span class="hljs-regexp">/etc/</span>containerd/config.toml<br>修改sandbox_image = <span class="hljs-string">&quot;registry.aliyuncs.com/google_containers/pause:3.9&quot;</span><br>修改cgroup相关的为SystemdCgroup = true<br>systemctl restart containerd<br><br><span class="hljs-regexp">/etc/</span>sysconfig/kubelet文件内容<br>KUBELET_EXTRA_ARGS=<span class="hljs-string">&quot;--fail-swap-on=false --cgroup-driver=systemd&quot;</span><br></code></pre></td></tr></table></figure><p>可以通过kubeadm init一个master节点，然后kubeadm join就行。但是kubeadm init默认文件的ip地址之类的很多是不对的。因此我们需要修改。最简单的方式就是在默认的配置文件基础上改。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 得到默认配置文件</span><br>kubeadm<span class="hljs-built_in"> config </span><span class="hljs-built_in">print</span> init-defaults &gt; kubeadm.yaml<br></code></pre></td></tr></table></figure><p>由于k8s镜像仓库的地址在国内一般访问不了，所以需要换源。在yaml文件里修改为阿里云的镜像源。</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">imageRepository:</span> registry.aliyuncs.com/google_containers<br></code></pre></td></tr></table></figure><p>由于我们的master ip为192.168.100.2，因此也需要修改yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">localAPIEndpoint:</span><br>  <span class="hljs-attr">advertiseAddress:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.100</span><span class="hljs-number">.2</span><br>  <span class="hljs-attr">bindPort:</span> <span class="hljs-number">6443</span><br><span class="hljs-attr">nodeRegistration:</span><br>  <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">k3s-master</span><br></code></pre></td></tr></table></figure><p>由于需要网络插件，因此yaml里面也需要修改。我们使用flannel网络插件。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">networking:</span><br><span class="hljs-symbol">  dnsDomain:</span> cluster.local<br><span class="hljs-symbol">  serviceSubnet:</span> <span class="hljs-number">10.96</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>/<span class="hljs-number">12</span><br><span class="hljs-symbol">  podSubnet:</span> <span class="hljs-number">10.244</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>/<span class="hljs-number">16</span>  <span class="hljs-meta"># flannel网络插件使用的地址</span><br></code></pre></td></tr></table></figure><p>之后便可以通过</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">kubeadm init <span class="hljs-comment">--config kubeadm.conf</span><br></code></pre></td></tr></table></figure><p>初始化之后会输出，在其他两个节点上join就行。</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">To <span class="hljs-built_in">start</span> <span class="hljs-keyword">using</span> your cluster, you need <span class="hljs-built_in">to</span> run <span class="hljs-keyword">the</span> following <span class="hljs-keyword">as</span> <span class="hljs-keyword">a</span> regular user:<br><br>  mkdir -p $HOME/.kube<br>  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config<br>  sudo chown $(id -u):$(id -g) $HOME/.kube/config<br><br>Alternatively, <span class="hljs-keyword">if</span> you are <span class="hljs-keyword">the</span> root user, you can run:<br><br>  export KUBECONFIG=/etc/kubernetes/admin.conf<br><br>You should now deploy <span class="hljs-keyword">a</span> pod network <span class="hljs-built_in">to</span> <span class="hljs-keyword">the</span> cluster.<br>Run <span class="hljs-string">&quot;kubectl apply -f [podnetwork].yaml&quot;</span> <span class="hljs-keyword">with</span> <span class="hljs-literal">one</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> options listed <span class="hljs-keyword">at</span>:<br>  <span class="hljs-keyword">https</span>://kubernetes.io/docs/concepts/cluster-administration/addons/<br><br>Then you can join <span class="hljs-keyword">any</span> <span class="hljs-built_in">number</span> <span class="hljs-keyword">of</span> worker nodes <span class="hljs-keyword">by</span> running <span class="hljs-keyword">the</span> following <span class="hljs-keyword">on</span> <span class="hljs-title">each</span> <span class="hljs-title">as</span> <span class="hljs-title">root</span>:<br><br>kubeadm join <span class="hljs-number">192.168</span><span class="hljs-number">.100</span><span class="hljs-number">.2</span>:<span class="hljs-number">6443</span> <span class="hljs-comment">--token abcdef.0123456789abcdef \</span><br><span class="hljs-comment">--discovery-token-ca-cert-hash sha256:ee49df999fb57ffc9239a754854efc0be50ab9e586b40327c0008508ce8c6dd2 </span><br></code></pre></td></tr></table></figure><p>网络插件使用flannel。自行下载。</p><p>如果想要使用dashboard的话，可以下载<a href="https://github.com/kubernetes/dashboard/blob/master/docs/user/access-control/creating-sample-user.md">插件</a>。<br>创建dashboard.yaml，用NodePort暴露服务，访问<a href="https://192.168.100.2:30002/">https://192.168.100.2:30002</a> 查看。token的话，用<code>kubectl -n kubernetes-dashboard create token admin-user</code>生成就行，然后输入。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">admin-user</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kubernetes-dashboard</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRoleBinding</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">admin-user</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">cluster-admin</span><br><span class="hljs-attr">subjects:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">admin-user</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kubernetes-dashboard</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kubernetes-dashboard-kong-proxy</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kubernetes-dashboard</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">kong-proxy-tls</span><br>    <span class="hljs-attr">nodePort:</span> <span class="hljs-number">30002</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">443</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">8443</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br><br></code></pre></td></tr></table></figure><h1 id="mysql集群"><a href="#mysql集群" class="headerlink" title="mysql集群"></a>mysql集群</h1><ul><li>mysql: 8.0.18</li><li>存储：Local PV</li><li>master写，slave读。</li></ul><h2 id="pv准备"><a href="#pv准备" class="headerlink" title="pv准备"></a>pv准备</h2><p>使用了Local PV。rook一直失败。</p><p>首先创建storageclass</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">kind:</span> StorageClass<br><span class="hljs-symbol">apiVersion:</span> storage.k8s.io/v1<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> local<br><span class="hljs-symbol">provisioner:</span> kubernetes.io/no-provisioner<br><span class="hljs-symbol">volumeBindingMode:</span> WaitForFirstConsumer<br></code></pre></td></tr></table></figure><p>然后创建三个pv。每个2GB</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">PersistentVolume</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">mysql-pv0</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">mysql</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">capacity:</span><br>    <span class="hljs-attr">storage:</span> <span class="hljs-string">2Gi</span><br>  <span class="hljs-attr">accessModes:</span> [<span class="hljs-string">&quot;ReadWriteOnce&quot;</span>]<br>  <span class="hljs-attr">persistentVolumeReclaimPolicy:</span> <span class="hljs-string">Retain</span><br>  <span class="hljs-attr">storageClassName:</span> <span class="hljs-string">local</span><br>  <span class="hljs-attr">local:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/mysql-data/0</span><br>  <span class="hljs-attr">nodeAffinity:</span><br>    <span class="hljs-attr">required:</span><br>      <span class="hljs-attr">nodeSelectorTerms:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">matchExpressions:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">kubernetes.io/hostname</span><br>          <span class="hljs-attr">operator:</span> <span class="hljs-string">In</span><br>          <span class="hljs-attr">values:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">k3s-master</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">PersistentVolume</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">mysql-pv1</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">mysql</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">capacity:</span><br>    <span class="hljs-attr">storage:</span> <span class="hljs-string">2Gi</span><br>  <span class="hljs-attr">accessModes:</span> [<span class="hljs-string">&quot;ReadWriteOnce&quot;</span>]<br>  <span class="hljs-attr">persistentVolumeReclaimPolicy:</span> <span class="hljs-string">Retain</span><br>  <span class="hljs-attr">storageClassName:</span> <span class="hljs-string">local</span><br>  <span class="hljs-attr">local:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/mysql-data/1</span><br>  <span class="hljs-attr">nodeAffinity:</span><br>    <span class="hljs-attr">required:</span><br>      <span class="hljs-attr">nodeSelectorTerms:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">matchExpressions:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">kubernetes.io/hostname</span><br>          <span class="hljs-attr">operator:</span> <span class="hljs-string">In</span><br>          <span class="hljs-attr">values:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">k3s-node1</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">PersistentVolume</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">mysql-pv2</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">mysql</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">capacity:</span><br>    <span class="hljs-attr">storage:</span> <span class="hljs-string">2Gi</span><br>  <span class="hljs-attr">accessModes:</span> [<span class="hljs-string">&quot;ReadWriteOnce&quot;</span>]<br>  <span class="hljs-attr">persistentVolumeReclaimPolicy:</span> <span class="hljs-string">Retain</span><br>  <span class="hljs-attr">storageClassName:</span> <span class="hljs-string">local</span><br>  <span class="hljs-attr">local:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/mysql-data/2</span><br>  <span class="hljs-attr">nodeAffinity:</span><br>    <span class="hljs-attr">required:</span><br>      <span class="hljs-attr">nodeSelectorTerms:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">matchExpressions:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">kubernetes.io/hostname</span><br>          <span class="hljs-attr">operator:</span> <span class="hljs-string">In</span><br>          <span class="hljs-attr">values:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">k3s-node2</span><br></code></pre></td></tr></table></figure><h2 id="mysql准备"><a href="#mysql准备" class="headerlink" title="mysql准备"></a>mysql准备</h2><p>首先准备configmap，这里必须使用default_authentication_plugin&#x3D; mysql_native_password。不然后面会没办法登录。mysql8.0开始默认使用caching_sha2_password加密规则，不修改的话后面权限会出问题。</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">mysql</span><br>  <span class="hljs-attribute">labels</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">mysql</span><br><span class="hljs-attribute">data</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">master.cnf</span><span class="hljs-punctuation">:</span> <span class="hljs-string">|</span><br>    <span class="hljs-comment"># 主节点 mysql 的配置文件</span><br>    <span class="hljs-attribute">[mysqld]</span><br><span class="hljs-attribute">    log-bin</span><br><span class="hljs-attribute">    default_authentication_plugin= mysql_native_password</span><br><span class="hljs-attribute">  slave.cnf</span><span class="hljs-punctuation">:</span> <span class="hljs-string">|</span><br>    <span class="hljs-comment"># 从节点 mysql 的配置文件</span><br>    [mysqld]<br>    super-read-only<br>    default_authentication_plugin= mysql_native_password<br></code></pre></td></tr></table></figure><p>创建两个服务，其中一个是headless服务</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">mysql-read</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">mysql</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">mysql</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">3306</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">mysql</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">mysql</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">mysql</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">mysql</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">3306</span><br>  <span class="hljs-attr">clusterIP:</span> <span class="hljs-string">None</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">mysql</span><br></code></pre></td></tr></table></figure><p>mysql集群搭建。使用免密登录方式。initcontainer负责copy配置信息。mysql-sync负责从主库同步。其实《深入剖析k8s》那本书很多东西都过时了，因此改了很多。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">StatefulSet</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">mysql</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">mysql</span><br>  <span class="hljs-attr">serviceName:</span> <span class="hljs-string">mysql</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">3</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">mysql</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">initContainers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">init-mysql</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">mysql:8.0.18</span><br>        <span class="hljs-attr">command:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">bash</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;-c&quot;</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">|</span><br><span class="hljs-string">          set -ex</span><br><span class="hljs-string">          # 从 Pod 的序号，生成 server-id</span><br><span class="hljs-string">          # [[ `hostname` =~ -([0-9]+)$ ]] || exit 1</span><br><span class="hljs-string">          [[ `echo $HOSTNAME` =~ -([0-9]+)$ ]] || exit 1</span><br><span class="hljs-string">          ordinal=$&#123;BASH_REMATCH[1]&#125;</span><br><span class="hljs-string">          echo [mysqld] &gt; /mnt/conf.d/server-id.cnf</span><br><span class="hljs-string">          # 由于 server-id=0 有特殊含义，我们给 ID 加一个 100 来避开它</span><br><span class="hljs-string">          echo server-id=$((100 + $ordinal)) &gt;&gt; /mnt/conf.d/server-id.cnf</span><br><span class="hljs-string">          # 如果 Pod 序号是 0，说明它是 Master 节点，从 ConfigMap 里把 Master 的配置文件拷贝到 /mnt/conf.d/ 目录；</span><br><span class="hljs-string">          # 否则，拷贝 Slave 的配置文件</span><br><span class="hljs-string">          if [[ $ordinal -eq 0 ]]; then</span><br><span class="hljs-string">            cp /mnt/config-map/master.cnf /mnt/conf.d/</span><br><span class="hljs-string">          else</span><br><span class="hljs-string">            cp /mnt/config-map/slave.cnf /mnt/conf.d/</span><br><span class="hljs-string">          fi</span><br><span class="hljs-string"></span>        <span class="hljs-attr">volumeMounts:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">conf</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/mnt/conf.d</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">config-map</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/mnt/config-map</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">mysql</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">mysql:8.0.18</span><br>        <span class="hljs-attr">env:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">MYSQL_ALLOW_EMPTY_PASSWORD</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;1&quot;</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">mysql</span><br>          <span class="hljs-attr">containerPort:</span> <span class="hljs-number">3306</span><br>        <span class="hljs-attr">volumeMounts:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">data</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/var/lib/mysql</span><br>          <span class="hljs-attr">subPath:</span> <span class="hljs-string">mysql</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">conf</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/etc/mysql/conf.d</span><br>        <span class="hljs-attr">resources:</span><br>          <span class="hljs-attr">requests:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">500m</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">1Gi</span><br>        <span class="hljs-attr">livenessProbe:</span><br>          <span class="hljs-attr">exec:</span><br>            <span class="hljs-attr">command:</span> [<span class="hljs-string">&quot;mysqladmin&quot;</span>, <span class="hljs-string">&quot;ping&quot;</span>]<br>          <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">30</span><br>          <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">10</span><br>          <span class="hljs-attr">timeoutSeconds:</span> <span class="hljs-number">5</span><br>        <span class="hljs-attr">readinessProbe:</span><br>          <span class="hljs-attr">exec:</span><br>            <span class="hljs-comment"># 通过 TCP 连接的方式进行健康检查</span><br>            <span class="hljs-attr">command:</span> [<span class="hljs-string">&quot;mysql&quot;</span>, <span class="hljs-string">&quot;-h&quot;</span>, <span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-string">&quot;-e&quot;</span>, <span class="hljs-string">&quot;SELECT 1&quot;</span>]<br>          <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">5</span><br>          <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">2</span><br>          <span class="hljs-attr">timeoutSeconds:</span> <span class="hljs-number">1</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">mysql-sync</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">mysql:8.0.18</span><br>        <span class="hljs-attr">command:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">bash</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;-c&quot;</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">|</span><br><span class="hljs-string">          set -ex</span><br><span class="hljs-string"></span><br>          [[ <span class="hljs-string">`echo</span> <span class="hljs-string">$HOSTNAME`</span> <span class="hljs-string">=~</span> <span class="hljs-string">-(</span>[<span class="hljs-number">0</span><span class="hljs-number">-9</span>]<span class="hljs-string">+)$</span> ]] <span class="hljs-string">||</span> <span class="hljs-string">exit</span> <span class="hljs-number">1</span><br>          <span class="hljs-string">ordinal=$&#123;BASH_REMATCH[1]&#125;</span><br>          <span class="hljs-string">if</span> [[ <span class="hljs-string">$ordinal</span> <span class="hljs-string">-eq</span> <span class="hljs-number">0</span> ]]<span class="hljs-string">;</span> <span class="hljs-string">then</span><br>            <span class="hljs-string">while</span> <span class="hljs-literal">true</span><span class="hljs-string">;</span> <span class="hljs-string">do</span> <span class="hljs-string">sleep</span> <span class="hljs-number">3600</span><span class="hljs-string">;</span> <span class="hljs-string">done;</span><br>          <span class="hljs-string">fi</span><br><br>          <span class="hljs-string">echo</span> <span class="hljs-string">&quot;Waiting for mysqld to be ready (accepting connections)&quot;</span><br>          <span class="hljs-string">until</span> <span class="hljs-string">mysql</span> <span class="hljs-string">-h</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> <span class="hljs-string">-e</span> <span class="hljs-string">&quot;SELECT 1&quot;</span><span class="hljs-string">;</span> <span class="hljs-string">do</span> <span class="hljs-string">sleep</span> <span class="hljs-number">1</span><span class="hljs-string">;</span> <span class="hljs-string">done</span><br><br>          <span class="hljs-string">MASTER_HOST=&#x27;mysql-0.mysql&#x27;</span><br><br>          <span class="hljs-string">result=$(mysql</span> <span class="hljs-string">-uroot</span> <span class="hljs-string">-h127.0.0.1</span> <span class="hljs-string">-e</span> <span class="hljs-string">&quot;SHOW SLAVE STATUS\G&quot;</span><span class="hljs-string">)</span><br>          <span class="hljs-string">if</span> [[ <span class="hljs-string">$result</span> <span class="hljs-string">==</span> <span class="hljs-string">*&quot;Slave_IO_Running:</span> <span class="hljs-literal">Yes</span><span class="hljs-string">&quot;* &amp;&amp; $result == *&quot;</span><span class="hljs-attr">Slave_SQL_Running:</span> <span class="hljs-literal">Yes</span><span class="hljs-string">&quot;* ]]; then</span><br><span class="hljs-string">            echo &quot;</span><span class="hljs-string">recover</span> <span class="hljs-string">START</span> <span class="hljs-string">SLAVE</span> <span class="hljs-string">&quot;</span><br><span class="hljs-string">          else</span><br><span class="hljs-string">            mysql -uroot -h127.0.0.1 -e &quot;</span><span class="hljs-string">CHANGE</span> <span class="hljs-string">MASTER</span> <span class="hljs-string">TO</span> <span class="hljs-string">MASTER_HOST=&#x27;$</span>&#123;<span class="hljs-string">MASTER_HOST</span>&#125;<span class="hljs-string">&#x27;,MASTER_USER=&#x27;</span><span class="hljs-string">root&#x27;</span>,<span class="hljs-string">MASTER_CONNECT_RETRY=10;START</span> <span class="hljs-string">SLAVE;&quot;</span><br>          <span class="hljs-string">fi</span><br><br>          <span class="hljs-string">while</span> <span class="hljs-literal">true</span><span class="hljs-string">;</span> <span class="hljs-string">do</span> <span class="hljs-string">sleep</span> <span class="hljs-number">3600</span><span class="hljs-string">;</span> <span class="hljs-string">done</span><br><br>        <span class="hljs-attr">volumeMounts:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">data</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/var/lib/mysql</span><br>          <span class="hljs-attr">subPath:</span> <span class="hljs-string">mysql</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">conf</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/etc/mysql/conf.d</span><br>      <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">conf</span><br>        <span class="hljs-attr">emptyDir:</span> &#123;&#125;<br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">config-map</span><br>        <span class="hljs-attr">configMap:</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">mysql</span><br>  <span class="hljs-attr">volumeClaimTemplates:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">data</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">accessModes:</span> [<span class="hljs-string">&quot;ReadWriteOnce&quot;</span>]<br>      <span class="hljs-attr">storageClassName:</span> <span class="hljs-string">&quot;local&quot;</span><br>      <span class="hljs-attr">resources:</span><br>        <span class="hljs-attr">requests:</span><br>          <span class="hljs-attr">storage:</span> <span class="hljs-string">2Gi</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
